/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/azure-devops-extension-api/Build/Build.js":
/*!****************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Build/Build.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n */\r\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    var AgentStatus;\r\n    (function (AgentStatus) {\r\n        /**\r\n         * Indicates that the build agent cannot be contacted.\r\n         */\r\n        AgentStatus[AgentStatus[\"Unavailable\"] = 0] = \"Unavailable\";\r\n        /**\r\n         * Indicates that the build agent is currently available.\r\n         */\r\n        AgentStatus[AgentStatus[\"Available\"] = 1] = \"Available\";\r\n        /**\r\n         * Indicates that the build agent has taken itself offline.\r\n         */\r\n        AgentStatus[AgentStatus[\"Offline\"] = 2] = \"Offline\";\r\n    })(AgentStatus = exports.AgentStatus || (exports.AgentStatus = {}));\r\n    var AuditAction;\r\n    (function (AuditAction) {\r\n        AuditAction[AuditAction[\"Add\"] = 1] = \"Add\";\r\n        AuditAction[AuditAction[\"Update\"] = 2] = \"Update\";\r\n        AuditAction[AuditAction[\"Delete\"] = 3] = \"Delete\";\r\n    })(AuditAction = exports.AuditAction || (exports.AuditAction = {}));\r\n    /**\r\n     * Represents the desired scope of authorization for a build.\r\n     */\r\n    var BuildAuthorizationScope;\r\n    (function (BuildAuthorizationScope) {\r\n        /**\r\n         * The identity used should have build service account permissions scoped to the project collection. This is useful when resources for a single build are spread across multiple projects.\r\n         */\r\n        BuildAuthorizationScope[BuildAuthorizationScope[\"ProjectCollection\"] = 1] = \"ProjectCollection\";\r\n        /**\r\n         * The identity used should have build service account permissions scoped to the project in which the build definition resides. This is useful for isolation of build jobs to a particular team project to avoid any unintentional escalation of privilege attacks during a build.\r\n         */\r\n        BuildAuthorizationScope[BuildAuthorizationScope[\"Project\"] = 2] = \"Project\";\r\n    })(BuildAuthorizationScope = exports.BuildAuthorizationScope || (exports.BuildAuthorizationScope = {}));\r\n    var BuildOptionInputType;\r\n    (function (BuildOptionInputType) {\r\n        BuildOptionInputType[BuildOptionInputType[\"String\"] = 0] = \"String\";\r\n        BuildOptionInputType[BuildOptionInputType[\"Boolean\"] = 1] = \"Boolean\";\r\n        BuildOptionInputType[BuildOptionInputType[\"StringList\"] = 2] = \"StringList\";\r\n        BuildOptionInputType[BuildOptionInputType[\"Radio\"] = 3] = \"Radio\";\r\n        BuildOptionInputType[BuildOptionInputType[\"PickList\"] = 4] = \"PickList\";\r\n        BuildOptionInputType[BuildOptionInputType[\"MultiLine\"] = 5] = \"MultiLine\";\r\n        BuildOptionInputType[BuildOptionInputType[\"BranchFilter\"] = 6] = \"BranchFilter\";\r\n    })(BuildOptionInputType = exports.BuildOptionInputType || (exports.BuildOptionInputType = {}));\r\n    var BuildPhaseStatus;\r\n    (function (BuildPhaseStatus) {\r\n        /**\r\n         * The state is not known.\r\n         */\r\n        BuildPhaseStatus[BuildPhaseStatus[\"Unknown\"] = 0] = \"Unknown\";\r\n        /**\r\n         * The build phase completed unsuccessfully.\r\n         */\r\n        BuildPhaseStatus[BuildPhaseStatus[\"Failed\"] = 1] = \"Failed\";\r\n        /**\r\n         * The build phase completed successfully.\r\n         */\r\n        BuildPhaseStatus[BuildPhaseStatus[\"Succeeded\"] = 2] = \"Succeeded\";\r\n    })(BuildPhaseStatus = exports.BuildPhaseStatus || (exports.BuildPhaseStatus = {}));\r\n    /**\r\n     * Specifies the desired ordering of builds.\r\n     */\r\n    var BuildQueryOrder;\r\n    (function (BuildQueryOrder) {\r\n        /**\r\n         * Order by finish time ascending.\r\n         */\r\n        BuildQueryOrder[BuildQueryOrder[\"FinishTimeAscending\"] = 2] = \"FinishTimeAscending\";\r\n        /**\r\n         * Order by finish time descending.\r\n         */\r\n        BuildQueryOrder[BuildQueryOrder[\"FinishTimeDescending\"] = 3] = \"FinishTimeDescending\";\r\n        /**\r\n         * Order by queue time descending.\r\n         */\r\n        BuildQueryOrder[BuildQueryOrder[\"QueueTimeDescending\"] = 4] = \"QueueTimeDescending\";\r\n        /**\r\n         * Order by queue time ascending.\r\n         */\r\n        BuildQueryOrder[BuildQueryOrder[\"QueueTimeAscending\"] = 5] = \"QueueTimeAscending\";\r\n        /**\r\n         * Order by start time descending.\r\n         */\r\n        BuildQueryOrder[BuildQueryOrder[\"StartTimeDescending\"] = 6] = \"StartTimeDescending\";\r\n        /**\r\n         * Order by start time ascending.\r\n         */\r\n        BuildQueryOrder[BuildQueryOrder[\"StartTimeAscending\"] = 7] = \"StartTimeAscending\";\r\n    })(BuildQueryOrder = exports.BuildQueryOrder || (exports.BuildQueryOrder = {}));\r\n    var BuildReason;\r\n    (function (BuildReason) {\r\n        /**\r\n         * No reason. This value should not be used.\r\n         */\r\n        BuildReason[BuildReason[\"None\"] = 0] = \"None\";\r\n        /**\r\n         * The build was started manually.\r\n         */\r\n        BuildReason[BuildReason[\"Manual\"] = 1] = \"Manual\";\r\n        /**\r\n         * The build was started for the trigger TriggerType.ContinuousIntegration.\r\n         */\r\n        BuildReason[BuildReason[\"IndividualCI\"] = 2] = \"IndividualCI\";\r\n        /**\r\n         * The build was started for the trigger TriggerType.BatchedContinuousIntegration.\r\n         */\r\n        BuildReason[BuildReason[\"BatchedCI\"] = 4] = \"BatchedCI\";\r\n        /**\r\n         * The build was started for the trigger TriggerType.Schedule.\r\n         */\r\n        BuildReason[BuildReason[\"Schedule\"] = 8] = \"Schedule\";\r\n        /**\r\n         * The build was started for the trigger TriggerType.ScheduleForced.\r\n         */\r\n        BuildReason[BuildReason[\"ScheduleForced\"] = 16] = \"ScheduleForced\";\r\n        /**\r\n         * The build was created by a user.\r\n         */\r\n        BuildReason[BuildReason[\"UserCreated\"] = 32] = \"UserCreated\";\r\n        /**\r\n         * The build was started manually for private validation.\r\n         */\r\n        BuildReason[BuildReason[\"ValidateShelveset\"] = 64] = \"ValidateShelveset\";\r\n        /**\r\n         * The build was started for the trigger ContinuousIntegrationType.Gated.\r\n         */\r\n        BuildReason[BuildReason[\"CheckInShelveset\"] = 128] = \"CheckInShelveset\";\r\n        /**\r\n         * The build was started by a pull request. Added in resource version 3.\r\n         */\r\n        BuildReason[BuildReason[\"PullRequest\"] = 256] = \"PullRequest\";\r\n        /**\r\n         * The build was started when another build completed.\r\n         */\r\n        BuildReason[BuildReason[\"BuildCompletion\"] = 512] = \"BuildCompletion\";\r\n        /**\r\n         * The build was triggered for retention policy purposes.\r\n         */\r\n        BuildReason[BuildReason[\"Triggered\"] = 943] = \"Triggered\";\r\n        /**\r\n         * All reasons.\r\n         */\r\n        BuildReason[BuildReason[\"All\"] = 1007] = \"All\";\r\n    })(BuildReason = exports.BuildReason || (exports.BuildReason = {}));\r\n    /**\r\n     * This is not a Flags enum because we don't want to set multiple statuses on a build. However, when adding values, please stick to powers of 2 as if it were a Flags enum This will ensure that things that key off multiple result types (like labelling sources) continue to work\r\n     */\r\n    var BuildResult;\r\n    (function (BuildResult) {\r\n        /**\r\n         * No result\r\n         */\r\n        BuildResult[BuildResult[\"None\"] = 0] = \"None\";\r\n        /**\r\n         * The build completed successfully.\r\n         */\r\n        BuildResult[BuildResult[\"Succeeded\"] = 2] = \"Succeeded\";\r\n        /**\r\n         * The build completed compilation successfully but had other errors.\r\n         */\r\n        BuildResult[BuildResult[\"PartiallySucceeded\"] = 4] = \"PartiallySucceeded\";\r\n        /**\r\n         * The build completed unsuccessfully.\r\n         */\r\n        BuildResult[BuildResult[\"Failed\"] = 8] = \"Failed\";\r\n        /**\r\n         * The build was canceled before starting.\r\n         */\r\n        BuildResult[BuildResult[\"Canceled\"] = 32] = \"Canceled\";\r\n    })(BuildResult = exports.BuildResult || (exports.BuildResult = {}));\r\n    var BuildStatus;\r\n    (function (BuildStatus) {\r\n        /**\r\n         * No status.\r\n         */\r\n        BuildStatus[BuildStatus[\"None\"] = 0] = \"None\";\r\n        /**\r\n         * The build is currently in progress.\r\n         */\r\n        BuildStatus[BuildStatus[\"InProgress\"] = 1] = \"InProgress\";\r\n        /**\r\n         * The build has completed.\r\n         */\r\n        BuildStatus[BuildStatus[\"Completed\"] = 2] = \"Completed\";\r\n        /**\r\n         * The build is cancelling\r\n         */\r\n        BuildStatus[BuildStatus[\"Cancelling\"] = 4] = \"Cancelling\";\r\n        /**\r\n         * The build is inactive in the queue.\r\n         */\r\n        BuildStatus[BuildStatus[\"Postponed\"] = 8] = \"Postponed\";\r\n        /**\r\n         * The build has not yet started.\r\n         */\r\n        BuildStatus[BuildStatus[\"NotStarted\"] = 32] = \"NotStarted\";\r\n        /**\r\n         * All status.\r\n         */\r\n        BuildStatus[BuildStatus[\"All\"] = 47] = \"All\";\r\n    })(BuildStatus = exports.BuildStatus || (exports.BuildStatus = {}));\r\n    var ControllerStatus;\r\n    (function (ControllerStatus) {\r\n        /**\r\n         * Indicates that the build controller cannot be contacted.\r\n         */\r\n        ControllerStatus[ControllerStatus[\"Unavailable\"] = 0] = \"Unavailable\";\r\n        /**\r\n         * Indicates that the build controller is currently available.\r\n         */\r\n        ControllerStatus[ControllerStatus[\"Available\"] = 1] = \"Available\";\r\n        /**\r\n         * Indicates that the build controller has taken itself offline.\r\n         */\r\n        ControllerStatus[ControllerStatus[\"Offline\"] = 2] = \"Offline\";\r\n    })(ControllerStatus = exports.ControllerStatus || (exports.ControllerStatus = {}));\r\n    var DefinitionQuality;\r\n    (function (DefinitionQuality) {\r\n        DefinitionQuality[DefinitionQuality[\"Definition\"] = 1] = \"Definition\";\r\n        DefinitionQuality[DefinitionQuality[\"Draft\"] = 2] = \"Draft\";\r\n    })(DefinitionQuality = exports.DefinitionQuality || (exports.DefinitionQuality = {}));\r\n    /**\r\n     * Specifies the desired ordering of definitions.\r\n     */\r\n    var DefinitionQueryOrder;\r\n    (function (DefinitionQueryOrder) {\r\n        /**\r\n         * No order\r\n         */\r\n        DefinitionQueryOrder[DefinitionQueryOrder[\"None\"] = 0] = \"None\";\r\n        /**\r\n         * Order by created on/last modified time ascending.\r\n         */\r\n        DefinitionQueryOrder[DefinitionQueryOrder[\"LastModifiedAscending\"] = 1] = \"LastModifiedAscending\";\r\n        /**\r\n         * Order by created on/last modified time descending.\r\n         */\r\n        DefinitionQueryOrder[DefinitionQueryOrder[\"LastModifiedDescending\"] = 2] = \"LastModifiedDescending\";\r\n        /**\r\n         * Order by definition name ascending.\r\n         */\r\n        DefinitionQueryOrder[DefinitionQueryOrder[\"DefinitionNameAscending\"] = 3] = \"DefinitionNameAscending\";\r\n        /**\r\n         * Order by definition name descending.\r\n         */\r\n        DefinitionQueryOrder[DefinitionQueryOrder[\"DefinitionNameDescending\"] = 4] = \"DefinitionNameDescending\";\r\n    })(DefinitionQueryOrder = exports.DefinitionQueryOrder || (exports.DefinitionQueryOrder = {}));\r\n    var DefinitionQueueStatus;\r\n    (function (DefinitionQueueStatus) {\r\n        /**\r\n         * When enabled the definition queue allows builds to be queued by users, the system will queue scheduled, gated and continuous integration builds, and the queued builds will be started by the system.\r\n         */\r\n        DefinitionQueueStatus[DefinitionQueueStatus[\"Enabled\"] = 0] = \"Enabled\";\r\n        /**\r\n         * When paused the definition queue allows builds to be queued by users and the system will queue scheduled, gated and continuous integration builds. Builds in the queue will not be started by the system.\r\n         */\r\n        DefinitionQueueStatus[DefinitionQueueStatus[\"Paused\"] = 1] = \"Paused\";\r\n        /**\r\n         * When disabled the definition queue will not allow builds to be queued by users and the system will not queue scheduled, gated or continuous integration builds. Builds already in the queue will not be started by the system.\r\n         */\r\n        DefinitionQueueStatus[DefinitionQueueStatus[\"Disabled\"] = 2] = \"Disabled\";\r\n    })(DefinitionQueueStatus = exports.DefinitionQueueStatus || (exports.DefinitionQueueStatus = {}));\r\n    var DefinitionTriggerType;\r\n    (function (DefinitionTriggerType) {\r\n        /**\r\n         * Manual builds only.\r\n         */\r\n        DefinitionTriggerType[DefinitionTriggerType[\"None\"] = 1] = \"None\";\r\n        /**\r\n         * A build should be started for each changeset.\r\n         */\r\n        DefinitionTriggerType[DefinitionTriggerType[\"ContinuousIntegration\"] = 2] = \"ContinuousIntegration\";\r\n        /**\r\n         * A build should be started for multiple changesets at a time at a specified interval.\r\n         */\r\n        DefinitionTriggerType[DefinitionTriggerType[\"BatchedContinuousIntegration\"] = 4] = \"BatchedContinuousIntegration\";\r\n        /**\r\n         * A build should be started on a specified schedule whether or not changesets exist.\r\n         */\r\n        DefinitionTriggerType[DefinitionTriggerType[\"Schedule\"] = 8] = \"Schedule\";\r\n        /**\r\n         * A validation build should be started for each check-in.\r\n         */\r\n        DefinitionTriggerType[DefinitionTriggerType[\"GatedCheckIn\"] = 16] = \"GatedCheckIn\";\r\n        /**\r\n         * A validation build should be started for each batch of check-ins.\r\n         */\r\n        DefinitionTriggerType[DefinitionTriggerType[\"BatchedGatedCheckIn\"] = 32] = \"BatchedGatedCheckIn\";\r\n        /**\r\n         * A build should be triggered when a GitHub pull request is created or updated. Added in resource version 3\r\n         */\r\n        DefinitionTriggerType[DefinitionTriggerType[\"PullRequest\"] = 64] = \"PullRequest\";\r\n        /**\r\n         * A build should be triggered when another build completes.\r\n         */\r\n        DefinitionTriggerType[DefinitionTriggerType[\"BuildCompletion\"] = 128] = \"BuildCompletion\";\r\n        /**\r\n         * All types.\r\n         */\r\n        DefinitionTriggerType[DefinitionTriggerType[\"All\"] = 255] = \"All\";\r\n    })(DefinitionTriggerType = exports.DefinitionTriggerType || (exports.DefinitionTriggerType = {}));\r\n    var DefinitionType;\r\n    (function (DefinitionType) {\r\n        DefinitionType[DefinitionType[\"Xaml\"] = 1] = \"Xaml\";\r\n        DefinitionType[DefinitionType[\"Build\"] = 2] = \"Build\";\r\n    })(DefinitionType = exports.DefinitionType || (exports.DefinitionType = {}));\r\n    var DeleteOptions;\r\n    (function (DeleteOptions) {\r\n        /**\r\n         * No data should be deleted. This value should not be used.\r\n         */\r\n        DeleteOptions[DeleteOptions[\"None\"] = 0] = \"None\";\r\n        /**\r\n         * The drop location should be deleted.\r\n         */\r\n        DeleteOptions[DeleteOptions[\"DropLocation\"] = 1] = \"DropLocation\";\r\n        /**\r\n         * The test results should be deleted.\r\n         */\r\n        DeleteOptions[DeleteOptions[\"TestResults\"] = 2] = \"TestResults\";\r\n        /**\r\n         * The version control label should be deleted.\r\n         */\r\n        DeleteOptions[DeleteOptions[\"Label\"] = 4] = \"Label\";\r\n        /**\r\n         * The build should be deleted.\r\n         */\r\n        DeleteOptions[DeleteOptions[\"Details\"] = 8] = \"Details\";\r\n        /**\r\n         * Published symbols should be deleted.\r\n         */\r\n        DeleteOptions[DeleteOptions[\"Symbols\"] = 16] = \"Symbols\";\r\n        /**\r\n         * All data should be deleted.\r\n         */\r\n        DeleteOptions[DeleteOptions[\"All\"] = 31] = \"All\";\r\n    })(DeleteOptions = exports.DeleteOptions || (exports.DeleteOptions = {}));\r\n    /**\r\n     * Specifies the desired ordering of folders.\r\n     */\r\n    var FolderQueryOrder;\r\n    (function (FolderQueryOrder) {\r\n        /**\r\n         * No order\r\n         */\r\n        FolderQueryOrder[FolderQueryOrder[\"None\"] = 0] = \"None\";\r\n        /**\r\n         * Order by folder name and path ascending.\r\n         */\r\n        FolderQueryOrder[FolderQueryOrder[\"FolderAscending\"] = 1] = \"FolderAscending\";\r\n        /**\r\n         * Order by folder name and path descending.\r\n         */\r\n        FolderQueryOrder[FolderQueryOrder[\"FolderDescending\"] = 2] = \"FolderDescending\";\r\n    })(FolderQueryOrder = exports.FolderQueryOrder || (exports.FolderQueryOrder = {}));\r\n    var GetOption;\r\n    (function (GetOption) {\r\n        /**\r\n         * Use the latest changeset at the time the build is queued.\r\n         */\r\n        GetOption[GetOption[\"LatestOnQueue\"] = 0] = \"LatestOnQueue\";\r\n        /**\r\n         * Use the latest changeset at the time the build is started.\r\n         */\r\n        GetOption[GetOption[\"LatestOnBuild\"] = 1] = \"LatestOnBuild\";\r\n        /**\r\n         * A user-specified version has been supplied.\r\n         */\r\n        GetOption[GetOption[\"Custom\"] = 2] = \"Custom\";\r\n    })(GetOption = exports.GetOption || (exports.GetOption = {}));\r\n    var IssueType;\r\n    (function (IssueType) {\r\n        IssueType[IssueType[\"Error\"] = 1] = \"Error\";\r\n        IssueType[IssueType[\"Warning\"] = 2] = \"Warning\";\r\n    })(IssueType = exports.IssueType || (exports.IssueType = {}));\r\n    var ProcessTemplateType;\r\n    (function (ProcessTemplateType) {\r\n        /**\r\n         * Indicates a custom template.\r\n         */\r\n        ProcessTemplateType[ProcessTemplateType[\"Custom\"] = 0] = \"Custom\";\r\n        /**\r\n         * Indicates a default template.\r\n         */\r\n        ProcessTemplateType[ProcessTemplateType[\"Default\"] = 1] = \"Default\";\r\n        /**\r\n         * Indicates an upgrade template.\r\n         */\r\n        ProcessTemplateType[ProcessTemplateType[\"Upgrade\"] = 2] = \"Upgrade\";\r\n    })(ProcessTemplateType = exports.ProcessTemplateType || (exports.ProcessTemplateType = {}));\r\n    var QueryDeletedOption;\r\n    (function (QueryDeletedOption) {\r\n        /**\r\n         * Include only non-deleted builds.\r\n         */\r\n        QueryDeletedOption[QueryDeletedOption[\"ExcludeDeleted\"] = 0] = \"ExcludeDeleted\";\r\n        /**\r\n         * Include deleted and non-deleted builds.\r\n         */\r\n        QueryDeletedOption[QueryDeletedOption[\"IncludeDeleted\"] = 1] = \"IncludeDeleted\";\r\n        /**\r\n         * Include only deleted builds.\r\n         */\r\n        QueryDeletedOption[QueryDeletedOption[\"OnlyDeleted\"] = 2] = \"OnlyDeleted\";\r\n    })(QueryDeletedOption = exports.QueryDeletedOption || (exports.QueryDeletedOption = {}));\r\n    var QueueOptions;\r\n    (function (QueueOptions) {\r\n        /**\r\n         * No queue options\r\n         */\r\n        QueueOptions[QueueOptions[\"None\"] = 0] = \"None\";\r\n        /**\r\n         * Create a plan Id for the build, do not run it\r\n         */\r\n        QueueOptions[QueueOptions[\"DoNotRun\"] = 1] = \"DoNotRun\";\r\n    })(QueueOptions = exports.QueueOptions || (exports.QueueOptions = {}));\r\n    var QueuePriority;\r\n    (function (QueuePriority) {\r\n        /**\r\n         * Low priority.\r\n         */\r\n        QueuePriority[QueuePriority[\"Low\"] = 5] = \"Low\";\r\n        /**\r\n         * Below normal priority.\r\n         */\r\n        QueuePriority[QueuePriority[\"BelowNormal\"] = 4] = \"BelowNormal\";\r\n        /**\r\n         * Normal priority.\r\n         */\r\n        QueuePriority[QueuePriority[\"Normal\"] = 3] = \"Normal\";\r\n        /**\r\n         * Above normal priority.\r\n         */\r\n        QueuePriority[QueuePriority[\"AboveNormal\"] = 2] = \"AboveNormal\";\r\n        /**\r\n         * High priority.\r\n         */\r\n        QueuePriority[QueuePriority[\"High\"] = 1] = \"High\";\r\n    })(QueuePriority = exports.QueuePriority || (exports.QueuePriority = {}));\r\n    var RepositoryCleanOptions;\r\n    (function (RepositoryCleanOptions) {\r\n        RepositoryCleanOptions[RepositoryCleanOptions[\"Source\"] = 0] = \"Source\";\r\n        RepositoryCleanOptions[RepositoryCleanOptions[\"SourceAndOutputDir\"] = 1] = \"SourceAndOutputDir\";\r\n        /**\r\n         * Re-create $(build.sourcesDirectory)\r\n         */\r\n        RepositoryCleanOptions[RepositoryCleanOptions[\"SourceDir\"] = 2] = \"SourceDir\";\r\n        /**\r\n         * Re-create $(agnet.buildDirectory) which contains $(build.sourcesDirectory), $(build.binariesDirectory) and any folders that left from previous build.\r\n         */\r\n        RepositoryCleanOptions[RepositoryCleanOptions[\"AllBuildDir\"] = 3] = \"AllBuildDir\";\r\n    })(RepositoryCleanOptions = exports.RepositoryCleanOptions || (exports.RepositoryCleanOptions = {}));\r\n    var ResultSet;\r\n    (function (ResultSet) {\r\n        /**\r\n         * Include all repositories\r\n         */\r\n        ResultSet[ResultSet[\"All\"] = 0] = \"All\";\r\n        /**\r\n         * Include most relevant repositories for user\r\n         */\r\n        ResultSet[ResultSet[\"Top\"] = 1] = \"Top\";\r\n    })(ResultSet = exports.ResultSet || (exports.ResultSet = {}));\r\n    var ScheduleDays;\r\n    (function (ScheduleDays) {\r\n        /**\r\n         * Do not run.\r\n         */\r\n        ScheduleDays[ScheduleDays[\"None\"] = 0] = \"None\";\r\n        /**\r\n         * Run on Monday.\r\n         */\r\n        ScheduleDays[ScheduleDays[\"Monday\"] = 1] = \"Monday\";\r\n        /**\r\n         * Run on Tuesday.\r\n         */\r\n        ScheduleDays[ScheduleDays[\"Tuesday\"] = 2] = \"Tuesday\";\r\n        /**\r\n         * Run on Wednesday.\r\n         */\r\n        ScheduleDays[ScheduleDays[\"Wednesday\"] = 4] = \"Wednesday\";\r\n        /**\r\n         * Run on Thursday.\r\n         */\r\n        ScheduleDays[ScheduleDays[\"Thursday\"] = 8] = \"Thursday\";\r\n        /**\r\n         * Run on Friday.\r\n         */\r\n        ScheduleDays[ScheduleDays[\"Friday\"] = 16] = \"Friday\";\r\n        /**\r\n         * Run on Saturday.\r\n         */\r\n        ScheduleDays[ScheduleDays[\"Saturday\"] = 32] = \"Saturday\";\r\n        /**\r\n         * Run on Sunday.\r\n         */\r\n        ScheduleDays[ScheduleDays[\"Sunday\"] = 64] = \"Sunday\";\r\n        /**\r\n         * Run on all days of the week.\r\n         */\r\n        ScheduleDays[ScheduleDays[\"All\"] = 127] = \"All\";\r\n    })(ScheduleDays = exports.ScheduleDays || (exports.ScheduleDays = {}));\r\n    var ServiceHostStatus;\r\n    (function (ServiceHostStatus) {\r\n        /**\r\n         * The service host is currently connected and accepting commands.\r\n         */\r\n        ServiceHostStatus[ServiceHostStatus[\"Online\"] = 1] = \"Online\";\r\n        /**\r\n         * The service host is currently disconnected and not accepting commands.\r\n         */\r\n        ServiceHostStatus[ServiceHostStatus[\"Offline\"] = 2] = \"Offline\";\r\n    })(ServiceHostStatus = exports.ServiceHostStatus || (exports.ServiceHostStatus = {}));\r\n    var SourceProviderAvailability;\r\n    (function (SourceProviderAvailability) {\r\n        /**\r\n         * The source provider is available in the hosted environment.\r\n         */\r\n        SourceProviderAvailability[SourceProviderAvailability[\"Hosted\"] = 1] = \"Hosted\";\r\n        /**\r\n         * The source provider is available in the on-premises environment.\r\n         */\r\n        SourceProviderAvailability[SourceProviderAvailability[\"OnPremises\"] = 2] = \"OnPremises\";\r\n        /**\r\n         * The source provider is available in all environments.\r\n         */\r\n        SourceProviderAvailability[SourceProviderAvailability[\"All\"] = 3] = \"All\";\r\n    })(SourceProviderAvailability = exports.SourceProviderAvailability || (exports.SourceProviderAvailability = {}));\r\n    var StageUpdateType;\r\n    (function (StageUpdateType) {\r\n        StageUpdateType[StageUpdateType[\"Cancel\"] = 0] = \"Cancel\";\r\n        StageUpdateType[StageUpdateType[\"Retry\"] = 1] = \"Retry\";\r\n    })(StageUpdateType = exports.StageUpdateType || (exports.StageUpdateType = {}));\r\n    var SupportLevel;\r\n    (function (SupportLevel) {\r\n        /**\r\n         * The functionality is not supported.\r\n         */\r\n        SupportLevel[SupportLevel[\"Unsupported\"] = 0] = \"Unsupported\";\r\n        /**\r\n         * The functionality is supported.\r\n         */\r\n        SupportLevel[SupportLevel[\"Supported\"] = 1] = \"Supported\";\r\n        /**\r\n         * The functionality is required.\r\n         */\r\n        SupportLevel[SupportLevel[\"Required\"] = 2] = \"Required\";\r\n    })(SupportLevel = exports.SupportLevel || (exports.SupportLevel = {}));\r\n    var TaskResult;\r\n    (function (TaskResult) {\r\n        TaskResult[TaskResult[\"Succeeded\"] = 0] = \"Succeeded\";\r\n        TaskResult[TaskResult[\"SucceededWithIssues\"] = 1] = \"SucceededWithIssues\";\r\n        TaskResult[TaskResult[\"Failed\"] = 2] = \"Failed\";\r\n        TaskResult[TaskResult[\"Canceled\"] = 3] = \"Canceled\";\r\n        TaskResult[TaskResult[\"Skipped\"] = 4] = \"Skipped\";\r\n        TaskResult[TaskResult[\"Abandoned\"] = 5] = \"Abandoned\";\r\n    })(TaskResult = exports.TaskResult || (exports.TaskResult = {}));\r\n    var TimelineRecordState;\r\n    (function (TimelineRecordState) {\r\n        TimelineRecordState[TimelineRecordState[\"Pending\"] = 0] = \"Pending\";\r\n        TimelineRecordState[TimelineRecordState[\"InProgress\"] = 1] = \"InProgress\";\r\n        TimelineRecordState[TimelineRecordState[\"Completed\"] = 2] = \"Completed\";\r\n    })(TimelineRecordState = exports.TimelineRecordState || (exports.TimelineRecordState = {}));\r\n    var ValidationResult;\r\n    (function (ValidationResult) {\r\n        ValidationResult[ValidationResult[\"OK\"] = 0] = \"OK\";\r\n        ValidationResult[ValidationResult[\"Warning\"] = 1] = \"Warning\";\r\n        ValidationResult[ValidationResult[\"Error\"] = 2] = \"Error\";\r\n    })(ValidationResult = exports.ValidationResult || (exports.ValidationResult = {}));\r\n    var WorkspaceMappingType;\r\n    (function (WorkspaceMappingType) {\r\n        /**\r\n         * The path is mapped in the workspace.\r\n         */\r\n        WorkspaceMappingType[WorkspaceMappingType[\"Map\"] = 0] = \"Map\";\r\n        /**\r\n         * The path is cloaked in the workspace.\r\n         */\r\n        WorkspaceMappingType[WorkspaceMappingType[\"Cloak\"] = 1] = \"Cloak\";\r\n    })(WorkspaceMappingType = exports.WorkspaceMappingType || (exports.WorkspaceMappingType = {}));\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-api/Build/Build.js?");

/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Build/BuildClient.js":
/*!**********************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Build/BuildClient.js ***!
  \**********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Common/RestClientBase */ \"./node_modules/azure-devops-extension-api/Common/RestClientBase.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, RestClientBase_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    var BuildRestClient = /** @class */ (function (_super) {\r\n        __extends(BuildRestClient, _super);\r\n        function BuildRestClient(options) {\r\n            return _super.call(this, options) || this;\r\n        }\r\n        /**\r\n         * Associates an artifact with a build.\r\n         *\r\n         * @param artifact - The artifact.\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         */\r\n        BuildRestClient.prototype.createArtifact = function (artifact, project, buildId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.5\",\r\n                            method: \"POST\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/artifacts/{artifactName}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            body: artifact\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a specific artifact for a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param artifactName - The name of the artifact.\r\n         */\r\n        BuildRestClient.prototype.getArtifact = function (project, buildId, artifactName) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        artifactName: artifactName\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.5\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/artifacts/{artifactName}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a specific artifact for a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param artifactName - The name of the artifact.\r\n         */\r\n        BuildRestClient.prototype.getArtifactContentZip = function (project, buildId, artifactName) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        artifactName: artifactName\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.5\",\r\n                            httpResponseType: \"application/zip\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/artifacts/{artifactName}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets all artifacts for a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         */\r\n        BuildRestClient.prototype.getArtifacts = function (project, buildId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.5\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/artifacts/{artifactName}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a file from the build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param artifactName - The name of the artifact.\r\n         * @param fileId - The primary key for the file.\r\n         * @param fileName - The name that the file will be set to.\r\n         */\r\n        BuildRestClient.prototype.getFile = function (project, buildId, artifactName, fileId, fileName) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        artifactName: artifactName,\r\n                        fileId: fileId,\r\n                        fileName: fileName\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.5\",\r\n                            httpResponseType: \"application/octet-stream\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/artifacts/{artifactName}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the list of attachments of a specific type that are associated with a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param type - The type of attachment.\r\n         */\r\n        BuildRestClient.prototype.getAttachments = function (project, buildId, type) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/attachments/{type}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId,\r\n                                type: type\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a specific attachment.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param timelineId - The ID of the timeline.\r\n         * @param recordId - The ID of the timeline record.\r\n         * @param type - The type of the attachment.\r\n         * @param name - The name of the attachment.\r\n         */\r\n        BuildRestClient.prototype.getAttachment = function (project, buildId, timelineId, recordId, type, name) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            httpResponseType: \"application/octet-stream\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/{timelineId}/{recordId}/attachments/{type}/{name}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId,\r\n                                timelineId: timelineId,\r\n                                recordId: recordId,\r\n                                type: type,\r\n                                name: name\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * @param resources -\r\n         * @param project - Project ID or project name\r\n         */\r\n        BuildRestClient.prototype.authorizeProjectResources = function (resources, project) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            method: \"PATCH\",\r\n                            routeTemplate: \"{project}/_apis/build/authorizedresources\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            body: resources\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * @param project - Project ID or project name\r\n         * @param type -\r\n         * @param id -\r\n         */\r\n        BuildRestClient.prototype.getProjectResources = function (project, type, id) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        type: type,\r\n                        id: id\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/build/authorizedresources\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a badge that indicates the status of the most recent build for a definition. Note that this API is deprecated. Prefer StatusBadgeController.GetStatusBadge.\r\n         *\r\n         * @param project - The project ID or name.\r\n         * @param definitionId - The ID of the definition.\r\n         * @param branchName - The name of the branch.\r\n         */\r\n        BuildRestClient.prototype.getBadge = function (project, definitionId, branchName) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        branchName: branchName\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"_apis/public/build/definitions/{project}/{definitionId}/badge\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a list of branches for the given source code repository.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param providerName - The name of the source provider.\r\n         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n         * @param repository - The vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.\r\n         * @param branchName - If supplied, the name of the branch to check for specifically.\r\n         */\r\n        BuildRestClient.prototype.listBranches = function (project, providerName, serviceEndpointId, repository, branchName) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        serviceEndpointId: serviceEndpointId,\r\n                        repository: repository,\r\n                        branchName: branchName\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/sourceProviders/{providerName}/branches\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                providerName: providerName\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a badge that indicates the status of the most recent build for the specified branch.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param repoType - The repository type.\r\n         * @param repoId - The repository ID.\r\n         * @param branchName - The branch name.\r\n         */\r\n        BuildRestClient.prototype.getBuildBadge = function (project, repoType, repoId, branchName) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        repoId: repoId,\r\n                        branchName: branchName\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/repos/{repoType}/badge\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                repoType: repoType\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a badge that indicates the status of the most recent build for the specified branch.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param repoType - The repository type.\r\n         * @param repoId - The repository ID.\r\n         * @param branchName - The branch name.\r\n         */\r\n        BuildRestClient.prototype.getBuildBadgeData = function (project, repoType, repoId, branchName) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        repoId: repoId,\r\n                        branchName: branchName\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/repos/{repoType}/badge\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                repoType: repoType\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Deletes a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         */\r\n        BuildRestClient.prototype.deleteBuild = function (project, buildId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.5\",\r\n                            method: \"DELETE\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a build\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId -\r\n         * @param propertyFilters -\r\n         */\r\n        BuildRestClient.prototype.getBuild = function (project, buildId, propertyFilters) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        propertyFilters: propertyFilters\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.5\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a list of builds.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param definitions - A comma-delimited list of definition IDs. If specified, filters to builds for these definitions.\r\n         * @param queues - A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues.\r\n         * @param buildNumber - If specified, filters to builds that match this build number. Append * to do a prefix search.\r\n         * @param minTime - If specified, filters to builds that finished/started/queued after this date based on the queryOrder specified.\r\n         * @param maxTime - If specified, filters to builds that finished/started/queued before this date based on the queryOrder specified.\r\n         * @param requestedFor - If specified, filters to builds requested for the specified user.\r\n         * @param reasonFilter - If specified, filters to builds that match this reason.\r\n         * @param statusFilter - If specified, filters to builds that match this status.\r\n         * @param resultFilter - If specified, filters to builds that match this result.\r\n         * @param tagFilters - A comma-delimited list of tags. If specified, filters to builds that have the specified tags.\r\n         * @param properties - A comma-delimited list of properties to retrieve.\r\n         * @param top - The maximum number of builds to return.\r\n         * @param continuationToken - A continuation token, returned by a previous call to this method, that can be used to return the next set of builds.\r\n         * @param maxBuildsPerDefinition - The maximum number of builds to return per definition.\r\n         * @param deletedFilter - Indicates whether to exclude, include, or only return deleted builds.\r\n         * @param queryOrder - The order in which builds should be returned.\r\n         * @param branchName - If specified, filters to builds that built branches that built this branch.\r\n         * @param buildIds - A comma-delimited list that specifies the IDs of builds to retrieve.\r\n         * @param repositoryId - If specified, filters to builds that built from this repository.\r\n         * @param repositoryType - If specified, filters to builds that built from repositories of this type.\r\n         */\r\n        BuildRestClient.prototype.getBuilds = function (project, definitions, queues, buildNumber, minTime, maxTime, requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, top, continuationToken, maxBuildsPerDefinition, deletedFilter, queryOrder, branchName, buildIds, repositoryId, repositoryType) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        definitions: definitions && definitions.join(\",\"),\r\n                        queues: queues && queues.join(\",\"),\r\n                        buildNumber: buildNumber,\r\n                        minTime: minTime,\r\n                        maxTime: maxTime,\r\n                        requestedFor: requestedFor,\r\n                        reasonFilter: reasonFilter,\r\n                        statusFilter: statusFilter,\r\n                        resultFilter: resultFilter,\r\n                        tagFilters: tagFilters && tagFilters.join(\",\"),\r\n                        properties: properties && properties.join(\",\"),\r\n                        '$top': top,\r\n                        continuationToken: continuationToken,\r\n                        maxBuildsPerDefinition: maxBuildsPerDefinition,\r\n                        deletedFilter: deletedFilter,\r\n                        queryOrder: queryOrder,\r\n                        branchName: branchName,\r\n                        buildIds: buildIds && buildIds.join(\",\"),\r\n                        repositoryId: repositoryId,\r\n                        repositoryType: repositoryType\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.5\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Queues a build\r\n         *\r\n         * @param build -\r\n         * @param project - Project ID or project name\r\n         * @param ignoreWarnings -\r\n         * @param checkInTicket -\r\n         * @param sourceBuildId -\r\n         */\r\n        BuildRestClient.prototype.queueBuild = function (build, project, ignoreWarnings, checkInTicket, sourceBuildId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        ignoreWarnings: ignoreWarnings,\r\n                        checkInTicket: checkInTicket,\r\n                        sourceBuildId: sourceBuildId\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.5\",\r\n                            method: \"POST\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            queryParams: queryValues,\r\n                            body: build\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Updates a build.\r\n         *\r\n         * @param build - The build.\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param retry -\r\n         */\r\n        BuildRestClient.prototype.updateBuild = function (build, project, buildId, retry) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        retry: retry\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.5\",\r\n                            method: \"PATCH\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            queryParams: queryValues,\r\n                            body: build\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Updates multiple builds.\r\n         *\r\n         * @param builds - The builds to update.\r\n         * @param project - Project ID or project name\r\n         */\r\n        BuildRestClient.prototype.updateBuilds = function (builds, project) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.5\",\r\n                            method: \"PATCH\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            body: builds\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the changes associated with a build\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId -\r\n         * @param continuationToken -\r\n         * @param top - The maximum number of changes to return\r\n         * @param includeSourceChange -\r\n         */\r\n        BuildRestClient.prototype.getBuildChanges = function (project, buildId, continuationToken, top, includeSourceChange) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        continuationToken: continuationToken,\r\n                        '$top': top,\r\n                        includeSourceChange: includeSourceChange\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/changes\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the changes made to the repository between two given builds.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param fromBuildId - The ID of the first build.\r\n         * @param toBuildId - The ID of the last build.\r\n         * @param top - The maximum number of changes to return.\r\n         */\r\n        BuildRestClient.prototype.getChangesBetweenBuilds = function (project, fromBuildId, toBuildId, top) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        fromBuildId: fromBuildId,\r\n                        toBuildId: toBuildId,\r\n                        '$top': top\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/changes\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a controller\r\n         *\r\n         * @param controllerId -\r\n         */\r\n        BuildRestClient.prototype.getBuildController = function (controllerId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"_apis/build/Controllers/{controllerId}\",\r\n                            routeValues: {\r\n                                controllerId: controllerId\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets controller, optionally filtered by name\r\n         *\r\n         * @param name -\r\n         */\r\n        BuildRestClient.prototype.getBuildControllers = function (name) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        name: name\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"_apis/build/Controllers/{controllerId}\",\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Creates a new definition.\r\n         *\r\n         * @param definition - The definition.\r\n         * @param project - Project ID or project name\r\n         * @param definitionToCloneId -\r\n         * @param definitionToCloneRevision -\r\n         */\r\n        BuildRestClient.prototype.createDefinition = function (definition, project, definitionToCloneId, definitionToCloneRevision) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        definitionToCloneId: definitionToCloneId,\r\n                        definitionToCloneRevision: definitionToCloneRevision\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.7\",\r\n                            method: \"POST\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{definitionId}\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            queryParams: queryValues,\r\n                            body: definition\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Deletes a definition and all associated builds.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param definitionId - The ID of the definition.\r\n         */\r\n        BuildRestClient.prototype.deleteDefinition = function (project, definitionId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.7\",\r\n                            method: \"DELETE\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{definitionId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a definition, optionally at a specific revision.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param definitionId - The ID of the definition.\r\n         * @param revision - The revision number to retrieve. If this is not specified, the latest version will be returned.\r\n         * @param minMetricsTime - If specified, indicates the date from which metrics should be included.\r\n         * @param propertyFilters - A comma-delimited list of properties to include in the results.\r\n         * @param includeLatestBuilds -\r\n         */\r\n        BuildRestClient.prototype.getDefinition = function (project, definitionId, revision, minMetricsTime, propertyFilters, includeLatestBuilds) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        revision: revision,\r\n                        minMetricsTime: minMetricsTime,\r\n                        propertyFilters: propertyFilters && propertyFilters.join(\",\"),\r\n                        includeLatestBuilds: includeLatestBuilds\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.7\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{definitionId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a list of definitions.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param name - If specified, filters to definitions whose names match this pattern.\r\n         * @param repositoryId - A repository ID. If specified, filters to definitions that use this repository.\r\n         * @param repositoryType - If specified, filters to definitions that have a repository of this type.\r\n         * @param queryOrder - Indicates the order in which definitions should be returned.\r\n         * @param top - The maximum number of definitions to return.\r\n         * @param continuationToken - A continuation token, returned by a previous call to this method, that can be used to return the next set of definitions.\r\n         * @param minMetricsTime - If specified, indicates the date from which metrics should be included.\r\n         * @param definitionIds - A comma-delimited list that specifies the IDs of definitions to retrieve.\r\n         * @param path - If specified, filters to definitions under this folder.\r\n         * @param builtAfter - If specified, filters to definitions that have builds after this date.\r\n         * @param notBuiltAfter - If specified, filters to definitions that do not have builds after this date.\r\n         * @param includeAllProperties - Indicates whether the full definitions should be returned. By default, shallow representations of the definitions are returned.\r\n         * @param includeLatestBuilds - Indicates whether to return the latest and latest completed builds for this definition.\r\n         * @param taskIdFilter - If specified, filters to definitions that use the specified task.\r\n         * @param processType - If specified, filters to definitions with the given process type.\r\n         * @param yamlFilename - If specified, filters to YAML definitions that match the given filename.\r\n         */\r\n        BuildRestClient.prototype.getDefinitions = function (project, name, repositoryId, repositoryType, queryOrder, top, continuationToken, minMetricsTime, definitionIds, path, builtAfter, notBuiltAfter, includeAllProperties, includeLatestBuilds, taskIdFilter, processType, yamlFilename) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        name: name,\r\n                        repositoryId: repositoryId,\r\n                        repositoryType: repositoryType,\r\n                        queryOrder: queryOrder,\r\n                        '$top': top,\r\n                        continuationToken: continuationToken,\r\n                        minMetricsTime: minMetricsTime,\r\n                        definitionIds: definitionIds && definitionIds.join(\",\"),\r\n                        path: path,\r\n                        builtAfter: builtAfter,\r\n                        notBuiltAfter: notBuiltAfter,\r\n                        includeAllProperties: includeAllProperties,\r\n                        includeLatestBuilds: includeLatestBuilds,\r\n                        taskIdFilter: taskIdFilter,\r\n                        processType: processType,\r\n                        yamlFilename: yamlFilename\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.7\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{definitionId}\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Restores a deleted definition\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param definitionId - The identifier of the definition to restore.\r\n         * @param deleted - When false, restores a deleted definition.\r\n         */\r\n        BuildRestClient.prototype.restoreDefinition = function (project, definitionId, deleted) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        deleted: deleted\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.7\",\r\n                            method: \"PATCH\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{definitionId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Updates an existing definition.\r\n         *\r\n         * @param definition - The new version of the defintion.\r\n         * @param project - Project ID or project name\r\n         * @param definitionId - The ID of the definition.\r\n         * @param secretsSourceDefinitionId -\r\n         * @param secretsSourceDefinitionRevision -\r\n         */\r\n        BuildRestClient.prototype.updateDefinition = function (definition, project, definitionId, secretsSourceDefinitionId, secretsSourceDefinitionRevision) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        secretsSourceDefinitionId: secretsSourceDefinitionId,\r\n                        secretsSourceDefinitionRevision: secretsSourceDefinitionRevision\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.7\",\r\n                            method: \"PUT\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{definitionId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId\r\n                            },\r\n                            queryParams: queryValues,\r\n                            body: definition\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the contents of a file in the given source code repository.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param providerName - The name of the source provider.\r\n         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n         * @param repository - If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.\r\n         * @param commitOrBranch - The identifier of the commit or branch from which a file's contents are retrieved.\r\n         * @param path - The path to the file to retrieve, relative to the root of the repository.\r\n         */\r\n        BuildRestClient.prototype.getFileContents = function (project, providerName, serviceEndpointId, repository, commitOrBranch, path) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        serviceEndpointId: serviceEndpointId,\r\n                        repository: repository,\r\n                        commitOrBranch: commitOrBranch,\r\n                        path: path\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            httpResponseType: \"text/plain\",\r\n                            routeTemplate: \"{project}/_apis/sourceProviders/{providerName}/fileContents\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                providerName: providerName\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Creates a new folder.\r\n         *\r\n         * @param folder - The folder.\r\n         * @param project - Project ID or project name\r\n         * @param path - The full path of the folder.\r\n         */\r\n        BuildRestClient.prototype.createFolder = function (folder, project, path) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        path: path\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            method: \"PUT\",\r\n                            routeTemplate: \"{project}/_apis/build/folders/{*path}\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            queryParams: queryValues,\r\n                            body: folder\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Deletes a definition folder. Definitions and their corresponding builds will also be deleted.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param path - The full path to the folder.\r\n         */\r\n        BuildRestClient.prototype.deleteFolder = function (project, path) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        path: path\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            method: \"DELETE\",\r\n                            routeTemplate: \"{project}/_apis/build/folders/{*path}\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a list of build definition folders.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param path - The path to start with.\r\n         * @param queryOrder - The order in which folders should be returned.\r\n         */\r\n        BuildRestClient.prototype.getFolders = function (project, path, queryOrder) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        queryOrder: queryOrder\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/folders/{*path}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                path: path\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Updates an existing folder at given  existing path\r\n         *\r\n         * @param folder - The new version of the folder.\r\n         * @param project - Project ID or project name\r\n         * @param path - The full path to the folder.\r\n         */\r\n        BuildRestClient.prototype.updateFolder = function (folder, project, path) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        path: path\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            method: \"POST\",\r\n                            routeTemplate: \"{project}/_apis/build/folders/{*path}\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            queryParams: queryValues,\r\n                            body: folder\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the latest build for a definition, optionally scoped to a specific branch.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param definition - definition name with optional leading folder path, or the definition id\r\n         * @param branchName - optional parameter that indicates the specific branch to use\r\n         */\r\n        BuildRestClient.prototype.getLatestBuild = function (project, definition, branchName) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        branchName: branchName\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/build/latest/{*definition}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definition: definition\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets an individual log file for a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param logId - The ID of the log file.\r\n         * @param startLine - The start line.\r\n         * @param endLine - The end line.\r\n         */\r\n        BuildRestClient.prototype.getBuildLog = function (project, buildId, logId, startLine, endLine) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        startLine: startLine,\r\n                        endLine: endLine\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            httpResponseType: \"text/plain\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/logs/{logId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId,\r\n                                logId: logId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets an individual log file for a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param logId - The ID of the log file.\r\n         * @param startLine - The start line.\r\n         * @param endLine - The end line.\r\n         */\r\n        BuildRestClient.prototype.getBuildLogLines = function (project, buildId, logId, startLine, endLine) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        startLine: startLine,\r\n                        endLine: endLine\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/logs/{logId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId,\r\n                                logId: logId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the logs for a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         */\r\n        BuildRestClient.prototype.getBuildLogs = function (project, buildId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/logs/{logId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the logs for a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         */\r\n        BuildRestClient.prototype.getBuildLogsZip = function (project, buildId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            httpResponseType: \"application/zip\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/logs/{logId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets an individual log file for a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param logId - The ID of the log file.\r\n         * @param startLine - The start line.\r\n         * @param endLine - The end line.\r\n         */\r\n        BuildRestClient.prototype.getBuildLogZip = function (project, buildId, logId, startLine, endLine) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        startLine: startLine,\r\n                        endLine: endLine\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            httpResponseType: \"application/zip\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/logs/{logId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId,\r\n                                logId: logId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets build metrics for a project.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param metricAggregationType - The aggregation type to use (hourly, daily).\r\n         * @param minMetricsTime - The date from which to calculate metrics.\r\n         */\r\n        BuildRestClient.prototype.getProjectMetrics = function (project, metricAggregationType, minMetricsTime) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        minMetricsTime: minMetricsTime\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/build/Metrics/{metricAggregationType}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                metricAggregationType: metricAggregationType\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets build metrics for a definition.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param definitionId - The ID of the definition.\r\n         * @param minMetricsTime - The date from which to calculate metrics.\r\n         */\r\n        BuildRestClient.prototype.getDefinitionMetrics = function (project, definitionId, minMetricsTime) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        minMetricsTime: minMetricsTime\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{definitionId}/Metrics\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets all build definition options supported by the system.\r\n         *\r\n         * @param project - Project ID or project name\r\n         */\r\n        BuildRestClient.prototype.getBuildOptionDefinitions = function (project) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/options\",\r\n                            routeValues: {\r\n                                project: project\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the contents of a directory in the given source code repository.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param providerName - The name of the source provider.\r\n         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n         * @param repository - If specified, the vendor-specific identifier or the name of the repository to get branches. Can only be omitted for providers that do not support multiple repositories.\r\n         * @param commitOrBranch - The identifier of the commit or branch from which a file's contents are retrieved.\r\n         * @param path - The path contents to list, relative to the root of the repository.\r\n         */\r\n        BuildRestClient.prototype.getPathContents = function (project, providerName, serviceEndpointId, repository, commitOrBranch, path) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        serviceEndpointId: serviceEndpointId,\r\n                        repository: repository,\r\n                        commitOrBranch: commitOrBranch,\r\n                        path: path\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/sourceProviders/{providerName}/pathContents\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                providerName: providerName\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets properties for a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param filter - A comma-delimited list of properties. If specified, filters to these specific properties.\r\n         */\r\n        BuildRestClient.prototype.getBuildProperties = function (project, buildId, filter) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        filter: filter && filter.join(\",\")\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/properties\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Updates properties for a build.\r\n         *\r\n         * @param document - A json-patch document describing the properties to update.\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         */\r\n        BuildRestClient.prototype.updateBuildProperties = function (document, project, buildId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            method: \"PATCH\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/properties\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            customHeaders: {\r\n                                \"Content-Type\": \"application/json-patch+json\",\r\n                            },\r\n                            body: document\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets properties for a definition.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param definitionId - The ID of the definition.\r\n         * @param filter - A comma-delimited list of properties. If specified, filters to these specific properties.\r\n         */\r\n        BuildRestClient.prototype.getDefinitionProperties = function (project, definitionId, filter) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        filter: filter && filter.join(\",\")\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{definitionId}/properties\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Updates properties for a definition.\r\n         *\r\n         * @param document - A json-patch document describing the properties to update.\r\n         * @param project - Project ID or project name\r\n         * @param definitionId - The ID of the definition.\r\n         */\r\n        BuildRestClient.prototype.updateDefinitionProperties = function (document, project, definitionId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            method: \"PATCH\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{definitionId}/properties\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId\r\n                            },\r\n                            customHeaders: {\r\n                                \"Content-Type\": \"application/json-patch+json\",\r\n                            },\r\n                            body: document\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a pull request object from source provider.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param providerName - The name of the source provider.\r\n         * @param pullRequestId - Vendor-specific id of the pull request.\r\n         * @param repositoryId - Vendor-specific identifier or the name of the repository that contains the pull request.\r\n         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n         */\r\n        BuildRestClient.prototype.getPullRequest = function (project, providerName, pullRequestId, repositoryId, serviceEndpointId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        repositoryId: repositoryId,\r\n                        serviceEndpointId: serviceEndpointId\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/sourceProviders/{providerName}/pullRequests/{pullRequestId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                providerName: providerName,\r\n                                pullRequestId: pullRequestId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a build report.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param type -\r\n         */\r\n        BuildRestClient.prototype.getBuildReport = function (project, buildId, type) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        type: type\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/report\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a build report.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param type -\r\n         */\r\n        BuildRestClient.prototype.getBuildReportHtmlContent = function (project, buildId, type) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        type: type\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            httpResponseType: \"text/html\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/report\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a list of source code repositories.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param providerName - The name of the source provider.\r\n         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n         * @param repository - If specified, the vendor-specific identifier or the name of a single repository to get.\r\n         * @param resultSet - 'top' for the repositories most relevant for the endpoint. If not set, all repositories are returned. Ignored if 'repository' is set.\r\n         * @param pageResults - If set to true, this will limit the set of results and will return a continuation token to continue the query.\r\n         * @param continuationToken - When paging results, this is a continuation token, returned by a previous call to this method, that can be used to return the next set of repositories.\r\n         */\r\n        BuildRestClient.prototype.listRepositories = function (project, providerName, serviceEndpointId, repository, resultSet, pageResults, continuationToken) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        serviceEndpointId: serviceEndpointId,\r\n                        repository: repository,\r\n                        resultSet: resultSet,\r\n                        pageResults: pageResults,\r\n                        continuationToken: continuationToken\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/sourceProviders/{providerName}/repositories\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                providerName: providerName\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * @param resources -\r\n         * @param project - Project ID or project name\r\n         * @param definitionId -\r\n         */\r\n        BuildRestClient.prototype.authorizeDefinitionResources = function (resources, project, definitionId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            method: \"PATCH\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{definitionId}/resources\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId\r\n                            },\r\n                            body: resources\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * @param project - Project ID or project name\r\n         * @param definitionId -\r\n         */\r\n        BuildRestClient.prototype.getDefinitionResources = function (project, definitionId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{definitionId}/resources\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets information about build resources in the system.\r\n         *\r\n         */\r\n        BuildRestClient.prototype.getResourceUsage = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"_apis/build/ResourceUsage\"\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the project's retention settings.\r\n         *\r\n         * @param project - Project ID or project name\r\n         */\r\n        BuildRestClient.prototype.getRetentionSettings = function (project) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/build/retention\",\r\n                            routeValues: {\r\n                                project: project\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Updates the project's retention settings.\r\n         *\r\n         * @param updateModel -\r\n         * @param project - Project ID or project name\r\n         */\r\n        BuildRestClient.prototype.updateRetentionSettings = function (updateModel, project) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            method: \"PATCH\",\r\n                            routeTemplate: \"{project}/_apis/build/retention\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            body: updateModel\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets all revisions of a definition.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param definitionId - The ID of the definition.\r\n         */\r\n        BuildRestClient.prototype.getDefinitionRevisions = function (project, definitionId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.3\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{definitionId}/revisions\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the build settings.\r\n         *\r\n         * @param project - Project ID or project name\r\n         */\r\n        BuildRestClient.prototype.getBuildSettings = function (project) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/build/settings\",\r\n                            routeValues: {\r\n                                project: project\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Updates the build settings.\r\n         *\r\n         * @param settings - The new settings.\r\n         * @param project - Project ID or project name\r\n         */\r\n        BuildRestClient.prototype.updateBuildSettings = function (settings, project) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            method: \"PATCH\",\r\n                            routeTemplate: \"{project}/_apis/build/settings\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            body: settings\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Get a list of source providers and their capabilities.\r\n         *\r\n         * @param project - Project ID or project name\r\n         */\r\n        BuildRestClient.prototype.listSourceProviders = function (project) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/sourceProviders\",\r\n                            routeValues: {\r\n                                project: project\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Update a build stage\r\n         *\r\n         * @param updateParameters -\r\n         * @param buildId -\r\n         * @param stageRefName -\r\n         * @param project - Project ID or project name\r\n         */\r\n        BuildRestClient.prototype.updateStage = function (updateParameters, buildId, stageRefName, project) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            method: \"PATCH\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/stages/{stageRefName}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId,\r\n                                stageRefName: stageRefName\r\n                            },\r\n                            body: updateParameters\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * \\<p\\>Gets the build status for a definition, optionally scoped to a specific branch, stage, job, and configuration.\\</p\\> \\<p\\>If there are more than one, then it is required to pass in a stageName value when specifying a jobName, and the same rule then applies for both if passing a configuration parameter.\\</p\\>\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param definition - Either the definition name with optional leading folder path, or the definition id.\r\n         * @param branchName - Only consider the most recent build for this branch.\r\n         * @param stageName - Use this stage within the pipeline to render the status.\r\n         * @param jobName - Use this job within a stage of the pipeline to render the status.\r\n         * @param configuration - Use this job configuration to render the status\r\n         * @param label - Replaces the default text on the left side of the badge.\r\n         */\r\n        BuildRestClient.prototype.getStatusBadge = function (project, definition, branchName, stageName, jobName, configuration, label) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        branchName: branchName,\r\n                        stageName: stageName,\r\n                        jobName: jobName,\r\n                        configuration: configuration,\r\n                        label: label\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/build/status/{*definition}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definition: definition\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Adds a tag to a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param tag - The tag to add.\r\n         */\r\n        BuildRestClient.prototype.addBuildTag = function (project, buildId, tag) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            method: \"PUT\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/tags/{*tag}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId,\r\n                                tag: tag\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Adds tags to a build.\r\n         *\r\n         * @param tags - The tags to add.\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         */\r\n        BuildRestClient.prototype.addBuildTags = function (tags, project, buildId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            method: \"POST\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/tags/{*tag}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            body: tags\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Removes a tag from a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param tag - The tag to remove.\r\n         */\r\n        BuildRestClient.prototype.deleteBuildTag = function (project, buildId, tag) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            method: \"DELETE\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/tags/{*tag}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId,\r\n                                tag: tag\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the tags for a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         */\r\n        BuildRestClient.prototype.getBuildTags = function (project, buildId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/tags/{*tag}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Adds a tag to a definition\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param definitionId - The ID of the definition.\r\n         * @param tag - The tag to add.\r\n         */\r\n        BuildRestClient.prototype.addDefinitionTag = function (project, definitionId, tag) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            method: \"PUT\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{DefinitionId}/tags/{*tag}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId,\r\n                                tag: tag\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Adds multiple tags to a definition.\r\n         *\r\n         * @param tags - The tags to add.\r\n         * @param project - Project ID or project name\r\n         * @param definitionId - The ID of the definition.\r\n         */\r\n        BuildRestClient.prototype.addDefinitionTags = function (tags, project, definitionId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            method: \"POST\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{DefinitionId}/tags/{*tag}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId\r\n                            },\r\n                            body: tags\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Removes a tag from a definition.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param definitionId - The ID of the definition.\r\n         * @param tag - The tag to remove.\r\n         */\r\n        BuildRestClient.prototype.deleteDefinitionTag = function (project, definitionId, tag) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            method: \"DELETE\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{DefinitionId}/tags/{*tag}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId,\r\n                                tag: tag\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the tags for a definition.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param definitionId - The ID of the definition.\r\n         * @param revision - The definition revision number. If not specified, uses the latest revision of the definition.\r\n         */\r\n        BuildRestClient.prototype.getDefinitionTags = function (project, definitionId, revision) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        revision: revision\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/{DefinitionId}/tags/{*tag}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                definitionId: definitionId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Removes a tag from builds, definitions, and from the tag store\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param tag - The tag to remove.\r\n         */\r\n        BuildRestClient.prototype.deleteTag = function (project, tag) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            method: \"DELETE\",\r\n                            routeTemplate: \"{project}/_apis/build/tags/{*tag}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                tag: tag\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a list of all build tags in the project.\r\n         *\r\n         * @param project - Project ID or project name\r\n         */\r\n        BuildRestClient.prototype.getTags = function (project) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/tags/{*tag}\",\r\n                            routeValues: {\r\n                                project: project\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Deletes a build definition template.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param templateId - The ID of the template.\r\n         */\r\n        BuildRestClient.prototype.deleteTemplate = function (project, templateId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.3\",\r\n                            method: \"DELETE\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/templates/{templateId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                templateId: templateId\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a specific build definition template.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param templateId - The ID of the requested template.\r\n         */\r\n        BuildRestClient.prototype.getTemplate = function (project, templateId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.3\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/templates/{templateId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                templateId: templateId\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets all definition templates.\r\n         *\r\n         * @param project - Project ID or project name\r\n         */\r\n        BuildRestClient.prototype.getTemplates = function (project) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.3\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/templates/{templateId}\",\r\n                            routeValues: {\r\n                                project: project\r\n                            }\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Updates an existing build definition template.\r\n         *\r\n         * @param template - The new version of the template.\r\n         * @param project - Project ID or project name\r\n         * @param templateId - The ID of the template.\r\n         */\r\n        BuildRestClient.prototype.saveTemplate = function (template, project, templateId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.3\",\r\n                            method: \"PUT\",\r\n                            routeTemplate: \"{project}/_apis/build/definitions/templates/{templateId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                templateId: templateId\r\n                            },\r\n                            body: template\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets details for a build\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId -\r\n         * @param timelineId -\r\n         * @param changeId -\r\n         * @param planId -\r\n         */\r\n        BuildRestClient.prototype.getBuildTimeline = function (project, buildId, timelineId, changeId, planId) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        changeId: changeId,\r\n                        planId: planId\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/Timeline/{timelineId}\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId,\r\n                                timelineId: timelineId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Recreates the webhooks for the specified triggers in the given source code repository.\r\n         *\r\n         * @param triggerTypes - The types of triggers to restore webhooks for.\r\n         * @param project - Project ID or project name\r\n         * @param providerName - The name of the source provider.\r\n         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n         * @param repository - If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories.\r\n         */\r\n        BuildRestClient.prototype.restoreWebhooks = function (triggerTypes, project, providerName, serviceEndpointId, repository) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        serviceEndpointId: serviceEndpointId,\r\n                        repository: repository\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            method: \"POST\",\r\n                            routeTemplate: \"{project}/_apis/sourceProviders/{providerName}/webhooks\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                providerName: providerName\r\n                            },\r\n                            queryParams: queryValues,\r\n                            body: triggerTypes\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets a list of webhooks installed in the given source code repository.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param providerName - The name of the source provider.\r\n         * @param serviceEndpointId - If specified, the ID of the service endpoint to query. Can only be omitted for providers that do not use service endpoints, e.g. TFVC or TFGit.\r\n         * @param repository - If specified, the vendor-specific identifier or the name of the repository to get webhooks. Can only be omitted for providers that do not support multiple repositories.\r\n         */\r\n        BuildRestClient.prototype.listWebhooks = function (project, providerName, serviceEndpointId, repository) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        serviceEndpointId: serviceEndpointId,\r\n                        repository: repository\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.1\",\r\n                            routeTemplate: \"{project}/_apis/sourceProviders/{providerName}/webhooks\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                providerName: providerName\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the work items associated with a build.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param top - The maximum number of work items to return.\r\n         */\r\n        BuildRestClient.prototype.getBuildWorkItemsRefs = function (project, buildId, top) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        '$top': top\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/workitems\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets the work items associated with a build, filtered to specific commits.\r\n         *\r\n         * @param commitIds - A comma-delimited list of commit IDs.\r\n         * @param project - Project ID or project name\r\n         * @param buildId - The ID of the build.\r\n         * @param top - The maximum number of work items to return, or the number of commits to consider if no commit IDs are specified.\r\n         */\r\n        BuildRestClient.prototype.getBuildWorkItemsRefsFromCommits = function (commitIds, project, buildId, top) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        '$top': top\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            method: \"POST\",\r\n                            routeTemplate: \"{project}/_apis/build/builds/{buildId}/workitems\",\r\n                            routeValues: {\r\n                                project: project,\r\n                                buildId: buildId\r\n                            },\r\n                            queryParams: queryValues,\r\n                            body: commitIds\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Gets all the work items between two builds.\r\n         *\r\n         * @param project - Project ID or project name\r\n         * @param fromBuildId - The ID of the first build.\r\n         * @param toBuildId - The ID of the last build.\r\n         * @param top - The maximum number of work items to return.\r\n         */\r\n        BuildRestClient.prototype.getWorkItemsBetweenBuilds = function (project, fromBuildId, toBuildId, top) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var queryValues;\r\n                return __generator(this, function (_a) {\r\n                    queryValues = {\r\n                        fromBuildId: fromBuildId,\r\n                        toBuildId: toBuildId,\r\n                        '$top': top\r\n                    };\r\n                    return [2 /*return*/, this.beginRequest({\r\n                            apiVersion: \"5.2-preview.2\",\r\n                            routeTemplate: \"{project}/_apis/build/workitems\",\r\n                            routeValues: {\r\n                                project: project\r\n                            },\r\n                            queryParams: queryValues\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        BuildRestClient.RESOURCE_AREA_ID = \"965220d5-5bb9-42cf-8d67-9b146df2a5a4\";\r\n        return BuildRestClient;\r\n    }(RestClientBase_1.RestClientBase));\r\n    exports.BuildRestClient = BuildRestClient;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-api/Build/BuildClient.js?");

/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Build/BuildServices.js":
/*!************************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Build/BuildServices.js ***!
  \************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    /**\r\n     * Contribution ids of Azure Pipelines services which can be obtained from DevOps.getService\r\n     */\r\n    var BuildServiceIds;\r\n    (function (BuildServiceIds) {\r\n        /**\r\n         * Service for getting contextual information when on a builds page\r\n         */\r\n        BuildServiceIds[\"BuildPageDataService\"] = \"ms.vss-build-web.build-page-data-service\";\r\n    })(BuildServiceIds = exports.BuildServiceIds || (exports.BuildServiceIds = {}));\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-api/Build/BuildServices.js?");

/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Build/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Build/index.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./Build */ \"./node_modules/azure-devops-extension-api/Build/Build.js\"), __webpack_require__(/*! ./BuildClient */ \"./node_modules/azure-devops-extension-api/Build/BuildClient.js\"), __webpack_require__(/*! ./BuildServices */ \"./node_modules/azure-devops-extension-api/Build/BuildServices.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Build_1, BuildClient_1, BuildServices_1) {\r\n    \"use strict\";\r\n    function __export(m) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    __export(Build_1);\r\n    __export(BuildClient_1);\r\n    __export(BuildServices_1);\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-api/Build/index.js?");

/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Common/Client.js":
/*!******************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Common/Client.js ***!
  \******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! azure-devops-extension-sdk */ \"./node_modules/azure-devops-extension-sdk/SDK.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, azure_devops_extension_sdk_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    function getClient(clientClass, clientOptions) {\r\n        var options = clientOptions || {};\r\n        if (!options.rootPath) {\r\n            options.rootPath = azure_devops_extension_sdk_1.getService(\"ms.vss-features.location-service\" /* LocationService */).then(function (locationService) {\r\n                if (clientClass.RESOURCE_AREA_ID) {\r\n                    return locationService.getResourceAreaLocation(clientClass.RESOURCE_AREA_ID);\r\n                }\r\n                else {\r\n                    return locationService.getServiceLocation();\r\n                }\r\n            });\r\n        }\r\n        if (!options.authTokenProvider) {\r\n            options.authTokenProvider = {\r\n                getAuthorizationHeader: function () {\r\n                    return azure_devops_extension_sdk_1.getAccessToken().then(function (token) { return token ? (\"Bearer \" + token) : \"\"; });\r\n                }\r\n            };\r\n        }\r\n        return new clientClass(options);\r\n    }\r\n    exports.getClient = getClient;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-api/Common/Client.js?");

/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Common/CommonServices.js":
/*!**************************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Common/CommonServices.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    /**\r\n     * Contribution ids of core DevOps services which can be obtained from DevOps.getService\r\n     */\r\n    var CommonServiceIds;\r\n    (function (CommonServiceIds) {\r\n        /**\r\n         * Service for interacting with the extension data service\r\n         */\r\n        CommonServiceIds[\"ExtensionDataService\"] = \"ms.vss-features.extension-data-service\";\r\n        /**\r\n         * Service for showing global message banners at the top of the page\r\n         */\r\n        CommonServiceIds[\"GlobalMessagesService\"] = \"ms.vss-tfs-web.tfs-global-messages-service\";\r\n        /**\r\n         * Service for interacting with the host window's navigation (URLs, new windows, etc.)\r\n         */\r\n        CommonServiceIds[\"HostNavigationService\"] = \"ms.vss-features.host-navigation-service\";\r\n        /**\r\n         * Service for interacting with the layout of the page: managing full-screen mode,\r\n         * opening dialogs and panels\r\n         */\r\n        CommonServiceIds[\"HostPageLayoutService\"] = \"ms.vss-features.host-page-layout-service\";\r\n        /**\r\n         * Service for getting URLs/locations from the host context\r\n         */\r\n        CommonServiceIds[\"LocationService\"] = \"ms.vss-features.location-service\";\r\n        /**\r\n         * Exposes project-related information from the current page\r\n         */\r\n        CommonServiceIds[\"ProjectPageService\"] = \"ms.vss-tfs-web.tfs-page-data-service\";\r\n    })(CommonServiceIds = exports.CommonServiceIds || (exports.CommonServiceIds = {}));\r\n    /**\r\n     * Host level for a VSS service\r\n     */\r\n    var TeamFoundationHostType;\r\n    (function (TeamFoundationHostType) {\r\n        /**\r\n         * The Deployment host\r\n         */\r\n        TeamFoundationHostType[TeamFoundationHostType[\"Deployment\"] = 1] = \"Deployment\";\r\n        /**\r\n         * The Enterprise host\r\n         */\r\n        TeamFoundationHostType[TeamFoundationHostType[\"Enterprise\"] = 2] = \"Enterprise\";\r\n        /**\r\n         * The organization/project collection host\r\n         */\r\n        TeamFoundationHostType[TeamFoundationHostType[\"Organization\"] = 4] = \"Organization\";\r\n    })(TeamFoundationHostType = exports.TeamFoundationHostType || (exports.TeamFoundationHostType = {}));\r\n    /**\r\n     * Size (width) options for panel\r\n     */\r\n    var PanelSize;\r\n    (function (PanelSize) {\r\n        PanelSize[PanelSize[\"Small\"] = 0] = \"Small\";\r\n        PanelSize[PanelSize[\"Medium\"] = 1] = \"Medium\";\r\n        PanelSize[PanelSize[\"Large\"] = 2] = \"Large\";\r\n    })(PanelSize = exports.PanelSize || (exports.PanelSize = {}));\r\n    /**\r\n     * The severity of the message.\r\n     */\r\n    var MessageBannerLevel;\r\n    (function (MessageBannerLevel) {\r\n        MessageBannerLevel[MessageBannerLevel[\"info\"] = 0] = \"info\";\r\n        MessageBannerLevel[MessageBannerLevel[\"warning\"] = 1] = \"warning\";\r\n        MessageBannerLevel[MessageBannerLevel[\"error\"] = 2] = \"error\";\r\n        MessageBannerLevel[MessageBannerLevel[\"success\"] = 3] = \"success\";\r\n    })(MessageBannerLevel = exports.MessageBannerLevel || (exports.MessageBannerLevel = {}));\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-api/Common/CommonServices.js?");

/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Common/Fetch.js":
/*!*****************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Common/Fetch.js ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! whatwg-fetch */ \"./node_modules/whatwg-fetch/fetch.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    /**\r\n     * Issue a fetch request. This is a wrapper around the browser fetch method that handles VSS authentication\r\n     * and triggers events that can be listened to by other modules.\r\n     *\r\n     * @param requestUrl Url to send the request to\r\n     * @param options fetch settings/options for the request\r\n     * @param vssRequestOptions VSS specific request options\r\n     *\r\n     * Triggered Events:\r\n     *  afterRequest -> IPostRequestEvent is sent after the request has completed.\r\n     *  beforeRequest -> IPreRequestEvent is sent before the request is made.\r\n     */\r\n    function issueRequest(requestUrl, options, vssRequestOptions) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response, headers, key, sessionId, command, refreshToken, authHeader, ex_1, error, error, _a;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        response = undefined;\r\n                        // Add a X-VSS-ReauthenticationAction header to all fetch requests\r\n                        if (!options) {\r\n                            options = {};\r\n                        }\r\n                        // If options.headers is set, check if it is a Headers object, and if not, convert it to one.\r\n                        if (options.headers) {\r\n                            if (options.headers instanceof Headers) {\r\n                                headers = options.headers;\r\n                            }\r\n                            else {\r\n                                headers = new Headers();\r\n                                if (typeof options.headers.hasOwnProperty === \"function\") {\r\n                                    for (key in options.headers) {\r\n                                        if (options.headers.hasOwnProperty(key)) {\r\n                                            headers.append(key, options.headers[key]);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            headers = new Headers();\r\n                        }\r\n                        options.headers = headers;\r\n                        headers.append(\"X-VSS-ReauthenticationAction\", \"Suppress\");\r\n                        // Add a X-TFS-Session header with the current sessionId and command for correlation\r\n                        if (vssRequestOptions) {\r\n                            sessionId = vssRequestOptions.sessionId;\r\n                            command = vssRequestOptions.command;\r\n                            if (sessionId) {\r\n                                if (command) {\r\n                                    headers.append(\"X-TFS-Session\", sessionId + \",\" + command);\r\n                                }\r\n                                else {\r\n                                    headers.append(\"X-TFS-Session\", sessionId);\r\n                                }\r\n                            }\r\n                        }\r\n                        // Send credentials to the same origin, we will use tokens for differing origins.\r\n                        options.credentials = \"same-origin\";\r\n                        refreshToken = false;\r\n                        _b.label = 1;\r\n                    case 1:\r\n                        if (!(vssRequestOptions && vssRequestOptions.authTokenProvider)) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, vssRequestOptions.authTokenProvider.getAuthorizationHeader(refreshToken)];\r\n                    case 2:\r\n                        authHeader = _b.sent();\r\n                        if (authHeader) {\r\n                            headers.append(\"Authorization\", authHeader);\r\n                            refreshToken = true;\r\n                        }\r\n                        headers.append(\"X-TFS-FedAuthRedirect\", \"Suppress\");\r\n                        _b.label = 3;\r\n                    case 3:\r\n                        _b.trys.push([3, 5, , 6]);\r\n                        return [4 /*yield*/, fetch(requestUrl, options)];\r\n                    case 4:\r\n                        response = _b.sent();\r\n                        return [3 /*break*/, 6];\r\n                    case 5:\r\n                        ex_1 = _b.sent();\r\n                        console.warn(\"Unhandled exception in fetch for \" + requestUrl + \": \" + (ex_1 && ex_1.toString()));\r\n                        error = new Error(\"TF400893: Unable to contact the server. Please check your network connection and try again.\");\r\n                        error.name = \"NetworkException\";\r\n                        throw error;\r\n                    case 6:\r\n                        // If we recieved a 401 and have a token manager, we will refresh our token and try again.\r\n                        if (response.status === 401 && !refreshToken && vssRequestOptions && vssRequestOptions.authTokenProvider) {\r\n                            refreshToken = true;\r\n                            return [3 /*break*/, 7];\r\n                        }\r\n                        _b.label = 7;\r\n                    case 7:\r\n                        if (false) {}\r\n                        _b.label = 8;\r\n                    case 8:\r\n                        if (!!response.ok) return [3 /*break*/, 10];\r\n                        error = new Error();\r\n                        error.name = \"TFS.WebApi.Exception\";\r\n                        error.status = response.status;\r\n                        _a = error;\r\n                        return [4 /*yield*/, response.text()];\r\n                    case 9:\r\n                        _a.responseText = _b.sent();\r\n                        // Attempt to parse the response as a json object, for many of the failures\r\n                        // the server will serialize details into the body.\r\n                        if (error.responseText && error.responseText !== \"\") {\r\n                            try {\r\n                                error.serverError = JSON.parse(error.responseText);\r\n                                if (error.serverError && error.serverError.message) {\r\n                                    error.message = error.serverError.message;\r\n                                }\r\n                            }\r\n                            catch (exception) {\r\n                            }\r\n                        }\r\n                        if (!error.message) {\r\n                            error.message = response.status + \": \" + response.statusText;\r\n                        }\r\n                        throw error;\r\n                    case 10: return [2 /*return*/, response];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    exports.issueRequest = issueRequest;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-api/Common/Fetch.js?");

/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Common/RestClientBase.js":
/*!**************************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Common/RestClientBase.js ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./Fetch */ \"./node_modules/azure-devops-extension-api/Common/Fetch.js\"), __webpack_require__(/*! ./Util/Serialization */ \"./node_modules/azure-devops-extension-api/Common/Util/Serialization.js\"), __webpack_require__(/*! ./Util/Url */ \"./node_modules/azure-devops-extension-api/Common/Util/Url.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Fetch_1, Serialization_1, Url_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    /**\r\n    * Base class that should be used (derived from) to make requests to VSS REST apis\r\n    */\r\n    var RestClientBase = /** @class */ (function () {\r\n        function RestClientBase(options) {\r\n            this._options = options || {};\r\n            if (typeof this._options.rootPath === \"string\") {\r\n                this._rootPath = Promise.resolve(this._options.rootPath);\r\n            }\r\n            else {\r\n                this._rootPath = this._options.rootPath || Promise.resolve(\"/\");\r\n            }\r\n        }\r\n        /**\r\n        * Gets the root path of the Service\r\n        *\r\n        * @returns Promise for the resolving the root path of the service.\r\n        */\r\n        RestClientBase.prototype.getRootPath = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this._rootPath];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n        * Issue a request to a VSS REST endpoint.\r\n        *\r\n        * @param requestParams request options\r\n        * @returns Promise for the response\r\n        */\r\n        RestClientBase.prototype.beginRequest = function (requestParams) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var _this = this;\r\n                return __generator(this, function (_a) {\r\n                    return [2 /*return*/, this._rootPath.then(function (rootPath) {\r\n                            var requestUrl = rootPath + Url_1.replaceRouteValues(requestParams.routeTemplate, requestParams.routeValues || {});\r\n                            if (requestParams.queryParams) {\r\n                                var uri = new Url_1.Uri(requestUrl);\r\n                                uri.addQueryParams(requestParams.queryParams);\r\n                                requestUrl = uri.absoluteUri;\r\n                            }\r\n                            return _this._issueRequest(requestUrl, requestParams.apiVersion, requestParams);\r\n                        })];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Issue a request to a VSS REST endpoint at the specified location\r\n         *\r\n         * @param requestUrl Resolved URL of the request\r\n         * @param apiVersion API version\r\n         * @param requestParams Optional request parameters\r\n         */\r\n        RestClientBase.prototype._issueRequest = function (requestUrl, apiVersion, requestParams) {\r\n            var fetchOptions = {};\r\n            fetchOptions.method = requestParams.method || \"GET\";\r\n            fetchOptions.mode = \"cors\";\r\n            if (!requestParams.isRawData && requestParams.body && fetchOptions.method.toUpperCase() !== 'GET') {\r\n                fetchOptions.body = JSON.stringify(requestParams.body);\r\n            }\r\n            else {\r\n                fetchOptions.body = requestParams.body;\r\n            }\r\n            var acceptType = requestParams.httpResponseType || \"application/json\";\r\n            var acceptHeaderValue = acceptType + \";api-version=\" + apiVersion + \";excludeUrls=true;enumsAsNumbers=true;msDateFormat=true;noArrayWrap=true\";\r\n            fetchOptions.headers = Object.assign({\r\n                \"Accept\": acceptHeaderValue,\r\n                \"Content-Type\": requestParams.body && \"application/json\"\r\n            }, requestParams.customHeaders) /* lib.dom.d.ts does not have the correct type for Headers */;\r\n            var vssRequestOptions = {\r\n                authTokenProvider: this._options.authTokenProvider,\r\n                sessionId: this._options.sessionId,\r\n                command: requestParams.command || this._options.command\r\n            };\r\n            var result = Fetch_1.issueRequest(requestUrl, fetchOptions, vssRequestOptions);\r\n            return result.then(function (response) {\r\n                if (requestParams.returnRawResponse) {\r\n                    return response;\r\n                }\r\n                else if (acceptType.toLowerCase().indexOf(\"json\") >= 0) {\r\n                    // MSJSON date formats must be replaced in the raw text before JSON parsing\r\n                    return response.text().then(Serialization_1.deserializeVssJsonObject);\r\n                }\r\n                else if (acceptType.toLowerCase() === \"text/plain\") {\r\n                    return response.text();\r\n                }\r\n                else {\r\n                    return response.arrayBuffer();\r\n                }\r\n            });\r\n        };\r\n        return RestClientBase;\r\n    }());\r\n    exports.RestClientBase = RestClientBase;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-api/Common/RestClientBase.js?");

/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Common/Util/Serialization.js":
/*!******************************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Common/Util/Serialization.js ***!
  \******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n */\r\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    var msAjaxDateRegEx = new RegExp('(^|[^\\\\\\\\])\\\\\"\\\\\\\\/Date\\\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\\\+|-)[0-9]{4})?\\\\)\\\\\\\\/\\\\\"', 'g');\r\n    /**\r\n     * Handle the raw text of a JSON response which may contain MSJSON style dates and\r\n     * deserialize (JSON.parse) the data in a way that restores Date objects rather than\r\n     * strings.\r\n     *\r\n     * MSJSON style dates are in the form:\r\n     *\r\n     *     \"lastModified\": \"\\/Date(1496158224000)\\/\"\r\n     *\r\n     * This format unnecessarily (but intentionally) escapes the \"/\" character. So the parsed\r\n     * JSON will have no trace of the escape character (\\).\r\n     *\r\n     * @param text The raw JSON text\r\n     */\r\n    function deserializeVssJsonObject(text) {\r\n        function replaceMsJsonDates(object, parentObject, parentObjectKey) {\r\n            if (parentObject && typeof object.__msjson_date__ === \"number\") {\r\n                parentObject[parentObjectKey] = new Date(object.__msjson_date__);\r\n                return;\r\n            }\r\n            for (var key in object) {\r\n                var value = object[key];\r\n                if (value !== null && typeof value === \"object\") {\r\n                    replaceMsJsonDates(object[key], object, key);\r\n                }\r\n            }\r\n        }\r\n        var deserializedData = null;\r\n        if (text) {\r\n            // Replace MSJSON dates with an object that we can easily identify after JSON.parse.\r\n            // This replaces the string value (like \"\\/Date(1496158224000)\\/\") with a JSON object that \r\n            // has an \"__msjson_date__\" key.\r\n            var replacedText = text.replace(msAjaxDateRegEx, \"$1{\\\"__msjson_date__\\\":$2 }\");\r\n            // Do the actual JSON deserialization\r\n            deserializedData = JSON.parse(replacedText);\r\n            // Go through the parsed object and create actual Date objects for our replacements made above\r\n            if (replacedText !== text) {\r\n                replaceMsJsonDates(deserializedData, null, \"\");\r\n            }\r\n        }\r\n        return deserializedData;\r\n    }\r\n    exports.deserializeVssJsonObject = deserializeVssJsonObject;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-api/Common/Util/Serialization.js?");

/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Common/Util/Url.js":
/*!********************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Common/Util/Url.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\n * ---------------------------------------------------------\r\n * Copyright(C) Microsoft Corporation. All rights reserved.\r\n * ---------------------------------------------------------\r\n */\r\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    /**\r\n     * Key constants used by route parsing.\r\n     */\r\n    var KeyCodes;\r\n    (function (KeyCodes) {\r\n        KeyCodes[KeyCodes[\"asterisk\"] = 42] = \"asterisk\";\r\n        KeyCodes[KeyCodes[\"endCurlyBrace\"] = 125] = \"endCurlyBrace\";\r\n        KeyCodes[KeyCodes[\"startCurlyBrace\"] = 123] = \"startCurlyBrace\";\r\n    })(KeyCodes || (KeyCodes = {}));\r\n    function prepareForComparison(value, upperCase) {\r\n        return value ? (upperCase ? value.toLocaleUpperCase() : value) : \"\";\r\n    }\r\n    function stringEquals(str1, str2, ignoreCase) {\r\n        if (str1 === str2) {\r\n            return true;\r\n        }\r\n        return prepareForComparison(str1, ignoreCase).localeCompare(prepareForComparison(str2, ignoreCase)) === 0;\r\n    }\r\n    /**\r\n    * Class that represents a Uri and allows parsing/getting and setting of individual parts\r\n    */\r\n    var Uri = /** @class */ (function () {\r\n        /**\r\n        * Create a new Uri.\r\n        *\r\n        * @param uri Optional uri string to populate values with\r\n        * @param options Options for parsing the uri string\r\n        */\r\n        function Uri(uri, options) {\r\n            /**\r\n            * The uri scheme such as http or https\r\n            */\r\n            this.scheme = \"\";\r\n            /**\r\n             * If true, do not emit the \"//\" separator after the scheme:\r\n             * Set to true for schemes like mailto (e.g. mailto:foo@bar)\r\n             */\r\n            this.noSchemeSeparator = false;\r\n            /**\r\n            * The uri hostname (does not include port or scheme)\r\n            */\r\n            this.host = \"\";\r\n            /**\r\n            * The port number of the uri as supplied in the url. 0 if left out in the url (e.g. the default port for the scheme).\r\n            */\r\n            this.port = 0;\r\n            /**\r\n            * The relative path of the uri\r\n            */\r\n            this.path = \"\";\r\n            /**\r\n            * The array of query parameters in the uri\r\n            */\r\n            this.queryParameters = [];\r\n            /**\r\n            * The hash string of the uri\r\n            */\r\n            this.hashString = \"\";\r\n            if (uri) {\r\n                this._setFromUriString(uri, options);\r\n            }\r\n        }\r\n        Uri.prototype._setFromUriString = function (uriString, options) {\r\n            var uri = uriString;\r\n            // Parse out the hash string\r\n            var hashSplit = this._singleSplit(uri, \"#\");\r\n            if (hashSplit) {\r\n                uri = hashSplit.part1;\r\n                this.hashString = this._decodeUriComponent(hashSplit.part2);\r\n            }\r\n            else {\r\n                this.hashString = \"\";\r\n            }\r\n            // Parse the query parameters\r\n            var querySplit = this._singleSplit(uri, \"?\");\r\n            if (querySplit) {\r\n                uri = querySplit.part1;\r\n                this.queryString = querySplit.part2;\r\n            }\r\n            else {\r\n                this.queryParameters = [];\r\n            }\r\n            this.scheme = \"\";\r\n            this.host = \"\";\r\n            this.port = 0;\r\n            this.path = \"\";\r\n            // Parse out the scheme components of the uri\r\n            this.noSchemeSeparator = false;\r\n            var schemeSplit = this._singleSplit(uri, \":\");\r\n            if (schemeSplit) {\r\n                this.scheme = schemeSplit.part1;\r\n                uri = schemeSplit.part2;\r\n                if (uri.substr(0, 2) === \"//\") {\r\n                    uri = uri.substr(2);\r\n                    // Parse out the path part of the uri\r\n                    var pathSplit = this._singleSplit(uri, \"/\");\r\n                    if (pathSplit) {\r\n                        uri = pathSplit.part1;\r\n                        this.path = pathSplit.part2;\r\n                    }\r\n                    else {\r\n                        this.path = \"\";\r\n                    }\r\n                    // Parse out the port number\r\n                    var portSplit = this._singleSplit(uri, \":\");\r\n                    if (portSplit) {\r\n                        this.host = portSplit.part1;\r\n                        this.port = parseInt(portSplit.part2);\r\n                        if (isNaN(this.port)) {\r\n                            // Segment after : was not a port, consider it part of the path\r\n                            this.host += \":\";\r\n                            this.path = portSplit.part2 + \"/\" + this.path;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.host = uri;\r\n                    }\r\n                }\r\n                else {\r\n                    // No host for schemes like mailto: just use path\r\n                    this.noSchemeSeparator = true;\r\n                    this.path = uri;\r\n                }\r\n            }\r\n            else {\r\n                // Relative Url was given\r\n                this.path = uri;\r\n            }\r\n            if (options && options.absoluteUriRequired && !this.scheme) {\r\n                throw new Error(\"The uri string \\\"\" + uriString + \"\\\" does not represent a valid absolute uri.\");\r\n            }\r\n        };\r\n        Uri.prototype._singleSplit = function (value, separator) {\r\n            var matchIndex = value.indexOf(separator);\r\n            if (matchIndex >= 0) {\r\n                return {\r\n                    part1: value.substr(0, matchIndex),\r\n                    part2: value.substr(matchIndex + 1)\r\n                };\r\n            }\r\n            else {\r\n                return undefined;\r\n            }\r\n        };\r\n        Uri.prototype._decodeUriComponent = function (value) {\r\n            if (value) {\r\n                // Replace \"+\" character with %20.\r\n                value = value.replace(/\\+/g, \"%20\");\r\n                value = decodeURIComponent(value);\r\n            }\r\n            return value;\r\n        };\r\n        Object.defineProperty(Uri.prototype, \"absoluteUri\", {\r\n            /**\r\n            * Get the absolute uri string for this Uri\r\n            */\r\n            get: function () {\r\n                var uri = \"\";\r\n                if (this.scheme) {\r\n                    uri = encodeURI(decodeURI(this.scheme)) + \":\";\r\n                    if (!this.noSchemeSeparator) {\r\n                        uri += \"//\";\r\n                    }\r\n                }\r\n                if (this.host) {\r\n                    uri += encodeURI(decodeURI(this.host));\r\n                    if (this.port) {\r\n                        uri += \":\" + this.port;\r\n                    }\r\n                    if (!this.noSchemeSeparator || this.path) {\r\n                        uri += \"/\";\r\n                    }\r\n                }\r\n                if (this.path) {\r\n                    var encodedPath = void 0;\r\n                    if (this.noSchemeSeparator) {\r\n                        // Only do simple encoding for schemes like mailto: or blob: where\r\n                        // we can't determine host versus path\r\n                        encodedPath = encodeURI(decodeURI(this.path));\r\n                    }\r\n                    else {\r\n                        var parts = this.path.split('/');\r\n                        encodedPath = parts.map(function (p) { return encodeURIComponent(decodeURIComponent(p)); }).join(\"/\");\r\n                    }\r\n                    if (this.host) {\r\n                        uri = combineUrlPaths(uri, encodedPath);\r\n                    }\r\n                    else {\r\n                        uri = uri + encodedPath;\r\n                    }\r\n                }\r\n                var queryString = this.queryString;\r\n                if (queryString) {\r\n                    uri += \"?\" + queryString;\r\n                }\r\n                if (this.hashString) {\r\n                    var params = this._splitStringIntoParams(this.hashString);\r\n                    var encodedString = this._getParamsAsString(params);\r\n                    uri += \"#\" + encodedString;\r\n                }\r\n                return uri;\r\n            },\r\n            /**\r\n            * Set the absolute uri string for this Uri. Replaces all existing values\r\n            */\r\n            set: function (uri) {\r\n                this._setFromUriString(uri || \"\");\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Gets the effective port number, returning the default port number if omitted for the given scheme.\r\n         */\r\n        Uri.prototype.getEffectivePort = function () {\r\n            if (this.port) {\r\n                return this.port;\r\n            }\r\n            else {\r\n                if (stringEquals(this.scheme, \"http\", true)) {\r\n                    return 80;\r\n                }\r\n                else if (stringEquals(this.scheme, \"https\", true)) {\r\n                    return 443;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Builds an encoded key/value pair string\r\n         * like query string or hash strings\r\n         */\r\n        Uri.prototype._getParamsAsString = function (params) {\r\n            if (params && params.length) {\r\n                return params.map(function (param) {\r\n                    if (param.value !== null) {\r\n                        return encodeURIComponent(param.name) + \"=\" + encodeURIComponent(param.value);\r\n                    }\r\n                    else {\r\n                        return encodeURIComponent(param.name);\r\n                    }\r\n                }).join(\"&\");\r\n            }\r\n            else {\r\n                return \"\";\r\n            }\r\n        };\r\n        Object.defineProperty(Uri.prototype, \"queryString\", {\r\n            /**\r\n            * Get the query string for this Uri.\r\n            */\r\n            get: function () {\r\n                return this._getParamsAsString(this.queryParameters);\r\n            },\r\n            /**\r\n            * Set the query string for this Uri. Replaces existing value\r\n            */\r\n            set: function (queryString) {\r\n                this.queryParameters = this._splitStringIntoParams(queryString);\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * Coverts a key/value pair string into parameters array\r\n         * @param paramString String such as a=b&c=d\r\n         */\r\n        Uri.prototype._splitStringIntoParams = function (paramString) {\r\n            var _this = this;\r\n            var params = [];\r\n            paramString.split('&').forEach(function (pair) {\r\n                if (pair) {\r\n                    var valueSplit = _this._singleSplit(pair, \"=\");\r\n                    if (valueSplit) {\r\n                        params.push({\r\n                            name: _this._decodeUriComponent(valueSplit.part1),\r\n                            value: _this._decodeUriComponent(valueSplit.part2)\r\n                        });\r\n                    }\r\n                    else {\r\n                        params.push({\r\n                            name: _this._decodeUriComponent(pair),\r\n                            value: null\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n            return params;\r\n        };\r\n        /**\r\n        * Get the value of the query parameter with the given key\r\n        *\r\n        * @param name Query parameter name\r\n        */\r\n        Uri.prototype.getQueryParam = function (name) {\r\n            var value;\r\n            if (this.queryParameters) {\r\n                var matchingPairs = this.queryParameters.filter(function (p) { return stringEquals(p.name, name, true); });\r\n                if (matchingPairs.length > 0) {\r\n                    value = matchingPairs[0].value;\r\n                }\r\n            }\r\n            return value;\r\n        };\r\n        /**\r\n         * Adds a query string parameter to the current uri\r\n         *\r\n         * @param name The Query parameter name\r\n         * @param value The Query parameter value\r\n         * @param replaceExisting If true, replace all existing parameters with the same name\r\n         */\r\n        Uri.prototype.addQueryParam = function (name, value, replaceExisting) {\r\n            if (replaceExisting) {\r\n                this.removeQueryParam(name);\r\n            }\r\n            if (!this.queryParameters) {\r\n                this.queryParameters = [];\r\n            }\r\n            this.queryParameters.push({ name: name, value: value });\r\n        };\r\n        /**\r\n         * Adds query string parameters to the current uri\r\n         *\r\n         * @param parameters Query parameters to add\r\n         * @param replaceExisting If true, replace all existing parameters with the same name\r\n         * @param keyPrefix If specified, a value to prepend to all query parameter keys\r\n         */\r\n        Uri.prototype.addQueryParams = function (parameters, replaceExisting, keyPrefix) {\r\n            var _this = this;\r\n            var _loop_1 = function (key) {\r\n                var value = parameters[key];\r\n                if (value !== null && value !== undefined) {\r\n                    var keyWithPrefix_1 = (keyPrefix || \"\") + key;\r\n                    if (value instanceof Date) {\r\n                        this_1.addQueryParam(keyWithPrefix_1, value.toJSON(), replaceExisting);\r\n                    }\r\n                    else if (Array.isArray(value)) {\r\n                        value.forEach(function (v) { return _this.addQueryParam(keyWithPrefix_1, \"\" + v, replaceExisting); });\r\n                    }\r\n                    else if (typeof value === \"object\") {\r\n                        this_1.addQueryParams(value, replaceExisting, keyWithPrefix_1 + \".\");\r\n                    }\r\n                    else {\r\n                        this_1.addQueryParam(keyWithPrefix_1, \"\" + value, replaceExisting);\r\n                    }\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            for (var key in parameters) {\r\n                _loop_1(key);\r\n            }\r\n        };\r\n        /**\r\n         * Removes a query string parameter\r\n         *\r\n         * @param name The Query parameter name\r\n         */\r\n        Uri.prototype.removeQueryParam = function (name) {\r\n            if (this.queryParameters) {\r\n                this.queryParameters = this.queryParameters.filter(function (p) { return !stringEquals(p.name, name, true); });\r\n            }\r\n        };\r\n        return Uri;\r\n    }());\r\n    exports.Uri = Uri;\r\n    /**\r\n     * Take url segments and join them with a single slash character. Takes care of path segements that start and/or end\r\n     * with a slash to ensure that the resulting URL does not have double-slashes\r\n     *\r\n     * @param paths Path segments to concatenate\r\n     */\r\n    function combineUrlPaths() {\r\n        var paths = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            paths[_i] = arguments[_i];\r\n        }\r\n        var segmentsToJoin = [];\r\n        // Trim leading and trailing slash in each segment\r\n        for (var i = 0, last = paths.length - 1; i <= last; i++) {\r\n            var path = paths[i];\r\n            if (path) {\r\n                if (path === \"/\" && (i === 0 || i === last)) {\r\n                    // For a \"/\" segment at the beginning or end of the list, insert an empty entry to force\r\n                    // a leading or trailing slash in the resulting URL\r\n                    segmentsToJoin.push(\"\");\r\n                }\r\n                else {\r\n                    if (i > 0 && path[0] === \"/\") {\r\n                        // Trim leading slash in any segment except the first one\r\n                        path = path.substr(1);\r\n                    }\r\n                    if (i < last && path[path.length - 1] === \"/\") {\r\n                        // Trim trailing slash in any segment except the last one\r\n                        path = path.substr(0, path.length - 1);\r\n                    }\r\n                    if (path) {\r\n                        segmentsToJoin.push(path);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (segmentsToJoin.length === 1 && segmentsToJoin[0] === \"\") {\r\n            return \"/\";\r\n        }\r\n        // Join segments by slash\r\n        return segmentsToJoin.join(\"/\");\r\n    }\r\n    exports.combineUrlPaths = combineUrlPaths;\r\n    /**\r\n     * Parse a route template into a structure that can be used to quickly do route replacements\r\n     *\r\n     * @param routeTemplate MVC route template string (like \"/foo/{id}/{*params}\")\r\n     */\r\n    function parseRouteTemplate(routeTemplate) {\r\n        var parsedRoute = {\r\n            segments: []\r\n        };\r\n        var paramStartIndex = -1;\r\n        var segmentStartIndex = -1;\r\n        var segmentPrefix = \"\";\r\n        for (var charIndex = 0, routeTemplateLen = routeTemplate.length; charIndex < routeTemplateLen; charIndex++) {\r\n            var c = routeTemplate.charCodeAt(charIndex);\r\n            if (paramStartIndex >= 0) {\r\n                if (c === 125 /* endCurlyBrace */) {\r\n                    var paramName = routeTemplate.substring(paramStartIndex, charIndex);\r\n                    var isWildCardParam = false;\r\n                    if (paramName.charCodeAt(0) === 42 /* asterisk */) {\r\n                        paramName = paramName.substr(1);\r\n                        isWildCardParam = true;\r\n                    }\r\n                    parsedRoute.segments.push({\r\n                        paramName: paramName,\r\n                        isWildCardParam: isWildCardParam\r\n                    });\r\n                    paramStartIndex = -1;\r\n                }\r\n            }\r\n            else {\r\n                if (c === 123 /* startCurlyBrace */ && routeTemplate.charCodeAt(charIndex + 1) !== 123 /* startCurlyBrace */) {\r\n                    // Start of a parameter\r\n                    if (segmentPrefix || segmentStartIndex >= 0) {\r\n                        // Store the previous segment\r\n                        var segmentText = segmentPrefix;\r\n                        if (segmentStartIndex >= 0) {\r\n                            segmentText += routeTemplate.substring(segmentStartIndex, charIndex);\r\n                        }\r\n                        if (segmentText) {\r\n                            parsedRoute.segments.push({\r\n                                text: segmentText\r\n                            });\r\n                        }\r\n                        // Reset the segment tracking info\r\n                        segmentStartIndex = -1;\r\n                        segmentPrefix = \"\";\r\n                    }\r\n                    paramStartIndex = charIndex + 1;\r\n                }\r\n                else {\r\n                    // Handle double {{ or double }} as an escape sequence. This is rare. For simplicity we will \r\n                    if ((c === 123 /* startCurlyBrace */ && routeTemplate.charCodeAt(charIndex + 1) === 123 /* startCurlyBrace */) ||\r\n                        (c === 125 /* endCurlyBrace */ && routeTemplate.charCodeAt(charIndex + 1) === 125 /* endCurlyBrace */)) {\r\n                        segmentPrefix = segmentPrefix + routeTemplate.substring(segmentStartIndex >= 0 ? segmentStartIndex : charIndex, charIndex + 1);\r\n                        segmentStartIndex = -1;\r\n                        charIndex++;\r\n                    }\r\n                    if (segmentStartIndex < 0) {\r\n                        segmentStartIndex = charIndex;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Store any pending segment\r\n        if (segmentStartIndex >= 0 || paramStartIndex >= 0) {\r\n            var segmentText = segmentPrefix + routeTemplate.substring(segmentStartIndex >= 0 ? segmentStartIndex : paramStartIndex);\r\n            if (segmentText) {\r\n                parsedRoute.segments.push({\r\n                    text: segmentText\r\n                });\r\n            }\r\n        }\r\n        // Mark any param as required if it has a text segment (other than just \"/\") after it\r\n        var required = false;\r\n        for (var i = parsedRoute.segments.length - 1; i >= 0; i--) {\r\n            var segment = parsedRoute.segments[i];\r\n            if (segment.text && segment.text !== \"/\") {\r\n                required = true;\r\n            }\r\n            else if (required && segment.paramName) {\r\n                segment.isRequiredParam = true;\r\n            }\r\n        }\r\n        return parsedRoute;\r\n    }\r\n    exports.parseRouteTemplate = parseRouteTemplate;\r\n    /**\r\n     * Take a set of routes and route values and form a url using the best match. The best match\r\n     * is the route with the highest number of replacements (of the given routeValues dictionary).\r\n     * In the event of a tie (same number of replacements) the route that came first wins.\r\n     *\r\n     * @param routeCollection Array of parsed routes\r\n     * @param routeValues Replacement values\r\n     */\r\n    function routeUrl(routeCollection, routeValues) {\r\n        var bestMatch = getBestRouteMatch(routeCollection, routeValues);\r\n        if (!bestMatch) {\r\n            return \"\";\r\n        }\r\n        var uri = new Uri(bestMatch.url);\r\n        for (var routeValueKey in routeValues) {\r\n            if (!bestMatch.matchedParameters[routeValueKey]) {\r\n                uri.addQueryParam(routeValueKey, routeValues[routeValueKey]);\r\n            }\r\n        }\r\n        return uri.absoluteUri;\r\n    }\r\n    exports.routeUrl = routeUrl;\r\n    /**\r\n     * Take a set of routes and find the best match. The best match is the route with the highest number of replacements\r\n     * (of the given routeValues dictionary). In the event of a tie (same number of replacements) the route that came first wins.\r\n     *\r\n     * @param routeCollection Array of parsed routes\r\n     * @param routeValues Replacement values\r\n     */\r\n    function getBestRouteMatch(routeCollection, routeValues) {\r\n        var bestMatch;\r\n        var totalRouteValues = Object.keys(routeValues).length;\r\n        for (var _i = 0, routeCollection_1 = routeCollection; _i < routeCollection_1.length; _i++) {\r\n            var route = routeCollection_1[_i];\r\n            var match = replaceParsedRouteValues(route, routeValues, false);\r\n            if (match && (!bestMatch || match.matchedParametersCount > bestMatch.matchedParametersCount)) {\r\n                bestMatch = match;\r\n                if (match.matchedParametersCount === totalRouteValues) {\r\n                    // This route matched all route values. Return its url directly (no need to even add query params)\r\n                    return bestMatch;\r\n                }\r\n            }\r\n        }\r\n        return bestMatch;\r\n    }\r\n    exports.getBestRouteMatch = getBestRouteMatch;\r\n    /**\r\n     * Replace route values for a specific parsed route\r\n     *\r\n     * @param parsedRoute The route to evaluate\r\n     * @param routeValues Dictionary of route replacement parameters\r\n     * @param continueOnUnmatchedSegements If true, continue with replacements even after a miss. By default (false), stop replacements once a parameter is not present.\r\n     */\r\n    function replaceParsedRouteValues(parsedRoute, routeValues, continueOnUnmatchedSegements) {\r\n        var urlParts = [];\r\n        var matchedParameters = {};\r\n        var matchedParametersCount = 0;\r\n        for (var segmentIndex = 0, l = parsedRoute.segments.length; segmentIndex < l; segmentIndex++) {\r\n            var segment = parsedRoute.segments[segmentIndex];\r\n            if (segment.text) {\r\n                var segmentText = segment.text;\r\n                if (continueOnUnmatchedSegements) {\r\n                    // Make sure we don't have consecutive slash (/) characters in the case of missing segments\r\n                    if (segmentIndex > 0 && segmentText.charAt(0) === \"/\") {\r\n                        if (urlParts.length === 0) {\r\n                            // First text segment after one or more missing parameter segments. Remove the leading slash.\r\n                            segmentText = segmentText.substr(1);\r\n                        }\r\n                    }\r\n                }\r\n                if (segmentText) {\r\n                    urlParts.push(segmentText);\r\n                }\r\n            }\r\n            else {\r\n                var value = routeValues[segment.paramName];\r\n                if (!value && value !== 0) {\r\n                    // The route value was not supplied\r\n                    if (!continueOnUnmatchedSegements) {\r\n                        if (segment.isRequiredParam) {\r\n                            // This is a required parameter. Return undefined since this route was not a match.\r\n                            return undefined;\r\n                        }\r\n                        else {\r\n                            // This is an omitted optional parameter. Return what we've computed so far.\r\n                            break;\r\n                        }\r\n                    }\r\n                    else if (urlParts.length) {\r\n                        // Unmatched segment being omitted. Remove any previously trailing slash\r\n                        var lastSegment = urlParts[urlParts.length - 1];\r\n                        if (lastSegment[lastSegment.length - 1] === \"/\") {\r\n                            urlParts[urlParts.length - 1] = lastSegment.substr(0, lastSegment.length - 1);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    urlParts.push(segment.isWildCardParam ? encodeURI(\"\" + value) : encodeURIComponent(\"\" + value));\r\n                    matchedParameters[segment.paramName] = true;\r\n                    matchedParametersCount++;\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            url: urlParts.join(\"\"),\r\n            matchedParameters: matchedParameters,\r\n            matchedParametersCount: matchedParametersCount\r\n        };\r\n    }\r\n    exports.replaceParsedRouteValues = replaceParsedRouteValues;\r\n    /**\r\n     * Take an MVC route template (like \"/foo/{id}/{*params}\") and replace the templated parts with values from the given dictionary\r\n     *\r\n     * @param routeTemplate MVC route template (like \"/foo/{id}/{*params}\")\r\n     * @param routeValues Route value replacements\r\n     */\r\n    function replaceRouteValues(routeTemplate, routeValues) {\r\n        var parsedRoute = parseRouteTemplate(routeTemplate);\r\n        return replaceParsedRouteValues(parsedRoute, routeValues, true).url;\r\n    }\r\n    exports.replaceRouteValues = replaceRouteValues;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-api/Common/Util/Url.js?");

/***/ }),

/***/ "./node_modules/azure-devops-extension-api/Common/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/Common/index.js ***!
  \*****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./Client */ \"./node_modules/azure-devops-extension-api/Common/Client.js\"), __webpack_require__(/*! ./CommonServices */ \"./node_modules/azure-devops-extension-api/Common/CommonServices.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, Client_1, CommonServices_1) {\r\n    \"use strict\";\r\n    function __export(m) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    __export(Client_1);\r\n    __export(CommonServices_1);\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-api/Common/index.js?");

/***/ }),

/***/ "./node_modules/azure-devops-extension-api/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/azure-devops-extension-api/index.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./Common/index */ \"./node_modules/azure-devops-extension-api/Common/index.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, index_1) {\r\n    \"use strict\";\r\n    function __export(m) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    __export(index_1);\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-api/index.js?");

/***/ }),

/***/ "./node_modules/azure-devops-extension-sdk/SDK.js":
/*!********************************************************!*\
  !*** ./node_modules/azure-devops-extension-sdk/SDK.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __assign = (this && this.__assign) || Object.assign || function(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n            t[p] = s[p];\r\n    }\r\n    return t;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./XDM */ \"./node_modules/azure-devops-extension-sdk/XDM.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports, XDM_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    /**\r\n     * Web SDK version number. Can be specified in an extension's set of demands like: vss-sdk-version/3.0\r\n     */\r\n    exports.sdkVersion = 3.0;\r\n    var global = window;\r\n    if (global._AzureDevOpsSDKVersion) {\r\n        console.error(\"The AzureDevOps SDK is already loaded. Only one version of this module can be loaded in a given document.\");\r\n    }\r\n    global._AzureDevOpsSDKVersion = exports.sdkVersion;\r\n    /**\r\n     * DevOps host level\r\n     */\r\n    var HostType;\r\n    (function (HostType) {\r\n        /**\r\n         * The Deployment host\r\n         */\r\n        HostType[HostType[\"Deployment\"] = 1] = \"Deployment\";\r\n        /**\r\n         * The Enterprise host\r\n         */\r\n        HostType[HostType[\"Enterprise\"] = 2] = \"Enterprise\";\r\n        /**\r\n         * The organization host\r\n         */\r\n        HostType[HostType[\"Organization\"] = 4] = \"Organization\";\r\n    })(HostType = exports.HostType || (exports.HostType = {}));\r\n    var hostControlId = \"DevOps.HostControl\";\r\n    var serviceManagerId = \"DevOps.ServiceManager\";\r\n    var parentChannel = XDM_1.channelManager.addChannel(window.parent);\r\n    var extensionContext;\r\n    var initialConfiguration;\r\n    var initialContributionId;\r\n    var userContext;\r\n    var hostContext;\r\n    var themeElement;\r\n    var resolveReady;\r\n    var readyPromise = new Promise(function (resolve) {\r\n        resolveReady = resolve;\r\n    });\r\n    /**\r\n     * Register a method so that the host frame can invoke events\r\n     */\r\n    function dispatchEvent(eventName, params) {\r\n        var global = window;\r\n        var evt;\r\n        if (typeof global.CustomEvent === \"function\") {\r\n            evt = new global.CustomEvent(eventName, params);\r\n        }\r\n        else {\r\n            params = params || { bubbles: false, cancelable: false };\r\n            evt = document.createEvent('CustomEvent');\r\n            evt.initCustomEvent(eventName, params.bubbles, params.cancelable, params.detail);\r\n        }\r\n        window.dispatchEvent(evt);\r\n    }\r\n    parentChannel.getObjectRegistry().register(\"DevOps.SdkClient\", {\r\n        dispatchEvent: dispatchEvent\r\n    });\r\n    /**\r\n     * Initiates the handshake with the host window.\r\n     *\r\n     * @param options - Initialization options for the extension.\r\n     */\r\n    function init(options) {\r\n        return new Promise(function (resolve) {\r\n            var initOptions = __assign({}, options, { sdkVersion: exports.sdkVersion });\r\n            parentChannel.invokeRemoteMethod(\"initialHandshake\", hostControlId, [initOptions]).then(function (handshakeData) {\r\n                initialConfiguration = handshakeData.initialConfig || {};\r\n                initialContributionId = handshakeData.contributionId;\r\n                var context = handshakeData.context;\r\n                extensionContext = context.extension;\r\n                userContext = context.user;\r\n                hostContext = context.host;\r\n                if (handshakeData.themeData) {\r\n                    applyTheme(handshakeData.themeData);\r\n                    window.addEventListener(\"themeChanged\", function (ev) {\r\n                        applyTheme(ev.detail.data);\r\n                    });\r\n                }\r\n                resolveReady();\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n    exports.init = init;\r\n    /**\r\n    * Register a callback that gets called once the initial setup/handshake has completed.\r\n    * If the initial setup is already completed, the callback is invoked at the end of the current call stack.\r\n    */\r\n    function ready() {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, readyPromise];\r\n            });\r\n        });\r\n    }\r\n    exports.ready = ready;\r\n    /**\r\n    * Notifies the host that the extension successfully loaded (stop showing the loading indicator)\r\n    */\r\n    function notifyLoadSucceeded() {\r\n        return parentChannel.invokeRemoteMethod(\"notifyLoadSucceeded\", hostControlId);\r\n    }\r\n    exports.notifyLoadSucceeded = notifyLoadSucceeded;\r\n    /**\r\n    * Notifies the host that the extension failed to load\r\n    */\r\n    function notifyLoadFailed(e) {\r\n        return parentChannel.invokeRemoteMethod(\"notifyLoadFailed\", hostControlId, [e]);\r\n    }\r\n    exports.notifyLoadFailed = notifyLoadFailed;\r\n    function getWaitForReadyError(method) {\r\n        return \"Attempted to call \" + method + \"() before init() was complete. Wait for init to complete or place within a ready() callback.\";\r\n    }\r\n    /**\r\n    * Get the configuration data passed in the initial handshake from the parent frame\r\n    */\r\n    function getConfiguration() {\r\n        if (!initialConfiguration) {\r\n            throw new Error(getWaitForReadyError(\"getConfiguration\"));\r\n        }\r\n        return initialConfiguration;\r\n    }\r\n    exports.getConfiguration = getConfiguration;\r\n    /**\r\n    * Gets the information about the contribution that first caused this extension to load.\r\n    */\r\n    function getContributionId() {\r\n        if (!initialContributionId) {\r\n            throw new Error(getWaitForReadyError(\"getContributionId\"));\r\n        }\r\n        return initialContributionId;\r\n    }\r\n    exports.getContributionId = getContributionId;\r\n    /**\r\n    * Gets information about the current user\r\n    */\r\n    function getUser() {\r\n        if (!userContext) {\r\n            throw new Error(getWaitForReadyError(\"getUser\"));\r\n        }\r\n        return userContext;\r\n    }\r\n    exports.getUser = getUser;\r\n    /**\r\n    * Gets information about the host (i.e. an Azure DevOps organization) that the page is targeting\r\n    */\r\n    function getHost() {\r\n        if (!hostContext) {\r\n            throw new Error(getWaitForReadyError(\"getHost\"));\r\n        }\r\n        return hostContext;\r\n    }\r\n    exports.getHost = getHost;\r\n    /**\r\n    * Get the context about the extension that owns the content that is being hosted\r\n    */\r\n    function getExtensionContext() {\r\n        if (!extensionContext) {\r\n            throw new Error(getWaitForReadyError(\"getExtensionContext\"));\r\n        }\r\n        return extensionContext;\r\n    }\r\n    exports.getExtensionContext = getExtensionContext;\r\n    /**\r\n    * Get the contribution with the given contribution id. The returned contribution has a method to get a registered object within that contribution.\r\n    *\r\n    * @param contributionId - Id of the contribution to get\r\n    */\r\n    function getService(contributionId) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, ready().then(function () {\r\n                        return parentChannel.invokeRemoteMethod(\"getService\", serviceManagerId, [contributionId]);\r\n                    })];\r\n            });\r\n        });\r\n    }\r\n    exports.getService = getService;\r\n    /**\r\n    * Register an object (instance or factory method) that this extension exposes to the host frame.\r\n    *\r\n    * @param instanceId - unique id of the registered object\r\n    * @param instance - Either: (1) an object instance, or (2) a function that takes optional context data and returns an object instance.\r\n    */\r\n    function register(instanceId, instance) {\r\n        parentChannel.getObjectRegistry().register(instanceId, instance);\r\n    }\r\n    exports.register = register;\r\n    /**\r\n    * Removes an object that this extension exposed to the host frame.\r\n    *\r\n    * @param instanceId - unique id of the registered object\r\n    */\r\n    function unregister(instanceId) {\r\n        parentChannel.getObjectRegistry().unregister(instanceId);\r\n    }\r\n    exports.unregister = unregister;\r\n    /**\r\n    * Fetch an access token which will allow calls to be made to other DevOps services\r\n    */\r\n    function getAccessToken() {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, parentChannel.invokeRemoteMethod(\"getAccessToken\", hostControlId).then(function (tokenObj) { return tokenObj.token; })];\r\n            });\r\n        });\r\n    }\r\n    exports.getAccessToken = getAccessToken;\r\n    /**\r\n    * Fetch an token which can be used to identify the current user\r\n    */\r\n    function getAppToken() {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, parentChannel.invokeRemoteMethod(\"getAppToken\", hostControlId).then(function (tokenObj) { return tokenObj.token; })];\r\n            });\r\n        });\r\n    }\r\n    exports.getAppToken = getAppToken;\r\n    /**\r\n    * Requests the parent window to resize the container for this extension based on the current extension size.\r\n    *\r\n    * @param width - Optional width, defaults to scrollWidth\r\n    * @param height - Optional height, defaults to scrollHeight\r\n    */\r\n    function resize(width, height) {\r\n        var body = document.body;\r\n        if (body) {\r\n            var newWidth = typeof width === \"number\" ? width : (body ? body.scrollWidth : undefined);\r\n            var newHeight = typeof height === \"number\" ? height : (body ? body.scrollHeight : undefined);\r\n            parentChannel.invokeRemoteMethod(\"resize\", hostControlId, [newWidth, newHeight]);\r\n        }\r\n    }\r\n    exports.resize = resize;\r\n    /**\r\n     * Applies theme variables to the current document\r\n     */\r\n    function applyTheme(themeData) {\r\n        if (!themeElement) {\r\n            themeElement = document.createElement(\"style\");\r\n            themeElement.type = \"text/css\";\r\n            document.head.appendChild(themeElement);\r\n        }\r\n        var cssVariables = [];\r\n        if (themeData) {\r\n            for (var varName in themeData) {\r\n                cssVariables.push(\"--\" + varName + \": \" + themeData[varName]);\r\n            }\r\n        }\r\n        themeElement.innerText = \":root { \" + cssVariables.join(\"; \") + \" } body { color: var(--text-primary-color) }\";\r\n        dispatchEvent(\"themeApplied\", { detail: themeData });\r\n    }\r\n    exports.applyTheme = applyTheme;\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-sdk/SDK.js?");

/***/ }),

/***/ "./node_modules/azure-devops-extension-sdk/XDM.js":
/*!********************************************************!*\
  !*** ./node_modules/azure-devops-extension-sdk/XDM.js ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! es6-promise/auto */ \"./node_modules/es6-promise/auto.js\"), __webpack_require__(/*! es6-object-assign/auto */ \"./node_modules/es6-object-assign/auto.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n    var smallestRandom = parseInt(\"10000000000\", 36);\r\n    var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991;\r\n    /**\r\n     * Create a new random 22-character fingerprint.\r\n     * @return string fingerprint\r\n     */\r\n    function newFingerprint() {\r\n        // smallestRandom ensures we will get a 11-character result from the base-36 conversion.\r\n        return Math.floor((Math.random() * (maxSafeInteger - smallestRandom)) + smallestRandom).toString(36) +\r\n            Math.floor((Math.random() * (maxSafeInteger - smallestRandom)) + smallestRandom).toString(36);\r\n    }\r\n    /**\r\n     * Gets all own and inherited property names of the given object, excluding\r\n     * those that are inherited from Object's prototype and \"constructor\".\r\n     * @param obj\r\n     */\r\n    function getAllPropertyNames(obj) {\r\n        var properties = {};\r\n        while (obj && obj !== Object.prototype) {\r\n            var ownPropertyNames = Object.getOwnPropertyNames(obj);\r\n            for (var _i = 0, ownPropertyNames_1 = ownPropertyNames; _i < ownPropertyNames_1.length; _i++) {\r\n                var name_1 = ownPropertyNames_1[_i];\r\n                if (name_1 !== \"constructor\") {\r\n                    properties[name_1] = true;\r\n                }\r\n            }\r\n            obj = Object.getPrototypeOf(obj);\r\n        }\r\n        return properties;\r\n    }\r\n    /**\r\n     * Catalog of objects exposed for XDM\r\n     */\r\n    var XDMObjectRegistry = /** @class */ (function () {\r\n        function XDMObjectRegistry() {\r\n            this.objects = {};\r\n        }\r\n        /**\r\n        * Register an object (instance or factory method) exposed by this frame to callers in a remote frame\r\n        *\r\n        * @param instanceId - unique id of the registered object\r\n        * @param instance - Either: (1) an object instance, or (2) a function that takes optional context data and returns an object instance.\r\n        */\r\n        XDMObjectRegistry.prototype.register = function (instanceId, instance) {\r\n            this.objects[instanceId] = instance;\r\n        };\r\n        /**\r\n        * Unregister an object (instance or factory method) that was previously registered by this frame\r\n        *\r\n        * @param instanceId - unique id of the registered object\r\n        */\r\n        XDMObjectRegistry.prototype.unregister = function (instanceId) {\r\n            delete this.objects[instanceId];\r\n        };\r\n        /**\r\n        * Get an instance of an object registered with the given id\r\n        *\r\n        * @param instanceId - unique id of the registered object\r\n        * @param contextData - Optional context data to pass to a registered object's factory method\r\n        */\r\n        XDMObjectRegistry.prototype.getInstance = function (instanceId, contextData) {\r\n            var instance = this.objects[instanceId];\r\n            if (!instance) {\r\n                return undefined;\r\n            }\r\n            if (typeof instance === \"function\") {\r\n                return instance(contextData);\r\n            }\r\n            else {\r\n                return instance;\r\n            }\r\n        };\r\n        return XDMObjectRegistry;\r\n    }());\r\n    exports.XDMObjectRegistry = XDMObjectRegistry;\r\n    var MAX_XDM_DEPTH = 100;\r\n    var nextChannelId = 1;\r\n    /**\r\n     * Represents a channel of communication between frames\\document\r\n     * Stays \"alive\" across multiple funtion\\method calls\r\n     */\r\n    var XDMChannel = /** @class */ (function () {\r\n        function XDMChannel(postToWindow, targetOrigin) {\r\n            this.promises = {};\r\n            this.nextMessageId = 1;\r\n            this.nextProxyId = 1;\r\n            this.proxyFunctions = {};\r\n            this.postToWindow = postToWindow;\r\n            this.targetOrigin = targetOrigin;\r\n            this.registry = new XDMObjectRegistry();\r\n            this.channelId = nextChannelId++;\r\n            if (!this.targetOrigin) {\r\n                this.handshakeToken = newFingerprint();\r\n            }\r\n        }\r\n        /**\r\n        * Get the object registry to handle messages from this specific channel.\r\n        * Upon receiving a message, this channel registry will be used first, then\r\n        * the global registry will be used if no handler is found here.\r\n        */\r\n        XDMChannel.prototype.getObjectRegistry = function () {\r\n            return this.registry;\r\n        };\r\n        /**\r\n        * Invoke a method via RPC. Lookup the registered object on the remote end of the channel and invoke the specified method.\r\n        *\r\n        * @param method - Name of the method to invoke\r\n        * @param instanceId - unique id of the registered object\r\n        * @param params - Arguments to the method to invoke\r\n        * @param instanceContextData - Optional context data to pass to a registered object's factory method\r\n        * @param serializationSettings - Optional serialization settings\r\n        */\r\n        XDMChannel.prototype.invokeRemoteMethod = function (methodName, instanceId, params, instanceContextData, serializationSettings) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var message, promise;\r\n                var _this = this;\r\n                return __generator(this, function (_a) {\r\n                    message = {\r\n                        id: this.nextMessageId++,\r\n                        methodName: methodName,\r\n                        instanceId: instanceId,\r\n                        instanceContext: instanceContextData,\r\n                        params: this._customSerializeObject(params, serializationSettings),\r\n                        serializationSettings: serializationSettings\r\n                    };\r\n                    if (!this.targetOrigin) {\r\n                        message.handshakeToken = this.handshakeToken;\r\n                    }\r\n                    promise = new Promise(function (resolve, reject) {\r\n                        _this.promises[message.id] = { resolve: resolve, reject: reject };\r\n                    });\r\n                    this._sendRpcMessage(message);\r\n                    return [2 /*return*/, promise];\r\n                });\r\n            });\r\n        };\r\n        /**\r\n        * Get a proxied object that represents the object registered with the given instance id on the remote side of this channel.\r\n        *\r\n        * @param instanceId - unique id of the registered object\r\n        * @param contextData - Optional context data to pass to a registered object's factory method\r\n        */\r\n        XDMChannel.prototype.getRemoteObjectProxy = function (instanceId, contextData) {\r\n            return this.invokeRemoteMethod(\"\", instanceId, undefined, contextData);\r\n        };\r\n        XDMChannel.prototype.invokeMethod = function (registeredInstance, rpcMessage) {\r\n            var _this = this;\r\n            if (!rpcMessage.methodName) {\r\n                // Null/empty method name indicates to return the registered object itself.\r\n                this._success(rpcMessage, registeredInstance, rpcMessage.handshakeToken);\r\n                return;\r\n            }\r\n            var method = registeredInstance[rpcMessage.methodName];\r\n            if (typeof method !== \"function\") {\r\n                this.error(rpcMessage, new Error(\"RPC method not found: \" + rpcMessage.methodName));\r\n                return;\r\n            }\r\n            try {\r\n                // Call specified method.  Add nested success and error call backs with closure\r\n                // so we can post back a response as a result or error as appropriate\r\n                var methodArgs = [];\r\n                if (rpcMessage.params) {\r\n                    methodArgs = this._customDeserializeObject(rpcMessage.params, {});\r\n                }\r\n                var result = method.apply(registeredInstance, methodArgs);\r\n                if (result && result.then && typeof result.then === \"function\") {\r\n                    result.then(function (asyncResult) {\r\n                        _this._success(rpcMessage, asyncResult, rpcMessage.handshakeToken);\r\n                    }, function (e) {\r\n                        _this.error(rpcMessage, e);\r\n                    });\r\n                }\r\n                else {\r\n                    this._success(rpcMessage, result, rpcMessage.handshakeToken);\r\n                }\r\n            }\r\n            catch (exception) {\r\n                // send back as error if an exception is thrown\r\n                this.error(rpcMessage, exception);\r\n            }\r\n        };\r\n        XDMChannel.prototype.getRegisteredObject = function (instanceId, instanceContext) {\r\n            if (instanceId === \"__proxyFunctions\") {\r\n                // Special case for proxied functions of remote instances\r\n                return this.proxyFunctions;\r\n            }\r\n            // Look in the channel registry first\r\n            var registeredObject = this.registry.getInstance(instanceId, instanceContext);\r\n            if (!registeredObject) {\r\n                // Look in the global registry as a fallback\r\n                registeredObject = exports.globalObjectRegistry.getInstance(instanceId, instanceContext);\r\n            }\r\n            return registeredObject;\r\n        };\r\n        /**\r\n        * Handle a received message on this channel. Dispatch to the appropriate object found via object registry\r\n        *\r\n        * @param rpcMessage - Message data\r\n        * @return True if the message was handled by this channel. Otherwise false.\r\n        */\r\n        XDMChannel.prototype.onMessage = function (rpcMessage) {\r\n            var _this = this;\r\n            if (rpcMessage.instanceId) {\r\n                // Find the object that handles this requestNeed to find implementation\r\n                // Look in the channel registry first\r\n                var registeredObject = this.getRegisteredObject(rpcMessage.instanceId, rpcMessage.instanceContext);\r\n                if (!registeredObject) {\r\n                    // If not found return false to indicate that the message was not handled\r\n                    return false;\r\n                }\r\n                if (typeof registeredObject[\"then\"] === \"function\") {\r\n                    registeredObject.then(function (resolvedInstance) {\r\n                        _this.invokeMethod(resolvedInstance, rpcMessage);\r\n                    }, function (e) {\r\n                        _this.error(rpcMessage, e);\r\n                    });\r\n                }\r\n                else {\r\n                    this.invokeMethod(registeredObject, rpcMessage);\r\n                }\r\n            }\r\n            else {\r\n                var promise = this.promises[rpcMessage.id];\r\n                if (!promise) {\r\n                    // Message not handled by this channel.\r\n                    return false;\r\n                }\r\n                if (rpcMessage.error) {\r\n                    promise.reject(this._customDeserializeObject([rpcMessage.error], {})[0]);\r\n                }\r\n                else {\r\n                    promise.resolve(this._customDeserializeObject([rpcMessage.result], {})[0]);\r\n                }\r\n                delete this.promises[rpcMessage.id];\r\n            }\r\n            // Message handled by this channel\r\n            return true;\r\n        };\r\n        XDMChannel.prototype.owns = function (source, origin, rpcMessage) {\r\n            /// Determines whether the current message belongs to this channel or not\r\n            if (this.postToWindow === source) {\r\n                // For messages coming from sandboxed iframes the origin will be set to the string \"null\".  This is \r\n                // how onprem works.  If it is not a sandboxed iFrame we will get the origin as expected.\r\n                if (this.targetOrigin) {\r\n                    if (origin) {\r\n                        return origin.toLowerCase() === \"null\" || this.targetOrigin.toLowerCase().indexOf(origin.toLowerCase()) === 0;\r\n                    }\r\n                    else {\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    if (rpcMessage.handshakeToken && rpcMessage.handshakeToken === this.handshakeToken) {\r\n                        this.targetOrigin = origin;\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        XDMChannel.prototype.error = function (messageObj, errorObj) {\r\n            this._sendRpcMessage({\r\n                id: messageObj.id,\r\n                error: this._customSerializeObject([errorObj], messageObj.serializationSettings)[0],\r\n                handshakeToken: messageObj.handshakeToken\r\n            });\r\n        };\r\n        XDMChannel.prototype._success = function (messageObj, result, handshakeToken) {\r\n            this._sendRpcMessage({\r\n                id: messageObj.id,\r\n                result: this._customSerializeObject([result], messageObj.serializationSettings)[0],\r\n                handshakeToken: handshakeToken\r\n            });\r\n        };\r\n        XDMChannel.prototype._sendRpcMessage = function (message) {\r\n            this.postToWindow.postMessage(JSON.stringify(message), \"*\");\r\n        };\r\n        XDMChannel.prototype._customSerializeObject = function (obj, settings, prevParentObjects, nextCircularRefId, depth) {\r\n            var _this = this;\r\n            if (nextCircularRefId === void 0) { nextCircularRefId = 1; }\r\n            if (depth === void 0) { depth = 1; }\r\n            if (!obj || depth > MAX_XDM_DEPTH) {\r\n                return undefined;\r\n            }\r\n            if (obj instanceof Node || obj instanceof Window || obj instanceof Event) {\r\n                return undefined;\r\n            }\r\n            var returnValue;\r\n            var parentObjects;\r\n            if (!prevParentObjects) {\r\n                parentObjects = {\r\n                    newObjects: [],\r\n                    originalObjects: []\r\n                };\r\n            }\r\n            else {\r\n                parentObjects = prevParentObjects;\r\n            }\r\n            parentObjects.originalObjects.push(obj);\r\n            var serializeMember = function (parentObject, newObject, key) {\r\n                var item;\r\n                try {\r\n                    item = parentObject[key];\r\n                }\r\n                catch (ex) {\r\n                    // Cannot access this property. Skip its serialization.\r\n                }\r\n                var itemType = typeof item;\r\n                if (itemType === \"undefined\") {\r\n                    return;\r\n                }\r\n                // Check for a circular reference by looking at parent objects\r\n                var parentItemIndex = -1;\r\n                if (itemType === \"object\") {\r\n                    parentItemIndex = parentObjects.originalObjects.indexOf(item);\r\n                }\r\n                if (parentItemIndex >= 0) {\r\n                    // Circular reference found. Add reference to parent\r\n                    var parentItem = parentObjects.newObjects[parentItemIndex];\r\n                    if (!parentItem.__circularReferenceId) {\r\n                        parentItem.__circularReferenceId = nextCircularRefId++;\r\n                    }\r\n                    newObject[key] = {\r\n                        __circularReference: parentItem.__circularReferenceId\r\n                    };\r\n                }\r\n                else {\r\n                    if (itemType === \"function\") {\r\n                        var proxyFunctionId = _this.nextProxyId++;\r\n                        newObject[key] = {\r\n                            __proxyFunctionId: _this._registerProxyFunction(item, obj),\r\n                            _channelId: _this.channelId\r\n                        };\r\n                    }\r\n                    else if (itemType === \"object\") {\r\n                        if (item && item instanceof Date) {\r\n                            newObject[key] = {\r\n                                __proxyDate: item.getTime()\r\n                            };\r\n                        }\r\n                        else {\r\n                            newObject[key] = _this._customSerializeObject(item, settings, parentObjects, nextCircularRefId, depth + 1);\r\n                        }\r\n                    }\r\n                    else if (key !== \"__proxyFunctionId\") {\r\n                        // Just add non object/function properties as-is. Don't include \"__proxyFunctionId\" to protect\r\n                        // our proxy methods from being invoked from other messages.\r\n                        newObject[key] = item;\r\n                    }\r\n                }\r\n            };\r\n            if (obj instanceof Array) {\r\n                returnValue = [];\r\n                parentObjects.newObjects.push(returnValue);\r\n                for (var i = 0, l = obj.length; i < l; i++) {\r\n                    serializeMember(obj, returnValue, i);\r\n                }\r\n            }\r\n            else {\r\n                returnValue = {};\r\n                parentObjects.newObjects.push(returnValue);\r\n                var keys = {};\r\n                try {\r\n                    keys = getAllPropertyNames(obj);\r\n                }\r\n                catch (ex) {\r\n                    // We may not be able to access the iterator of this object. Skip its serialization.\r\n                }\r\n                for (var key in keys) {\r\n                    // Don't serialize properties that start with an underscore.\r\n                    if ((key && key[0] !== \"_\") || (settings && settings.includeUnderscoreProperties)) {\r\n                        serializeMember(obj, returnValue, key);\r\n                    }\r\n                }\r\n            }\r\n            parentObjects.originalObjects.pop();\r\n            parentObjects.newObjects.pop();\r\n            return returnValue;\r\n        };\r\n        XDMChannel.prototype._registerProxyFunction = function (func, context) {\r\n            var proxyFunctionId = this.nextProxyId++;\r\n            this.proxyFunctions[\"proxy\" + proxyFunctionId] = function () {\r\n                return func.apply(context, Array.prototype.slice.call(arguments, 0));\r\n            };\r\n            return proxyFunctionId;\r\n        };\r\n        XDMChannel.prototype._customDeserializeObject = function (obj, circularRefs) {\r\n            var _this = this;\r\n            var that = this;\r\n            if (!obj) {\r\n                return null;\r\n            }\r\n            var deserializeMember = function (parentObject, key) {\r\n                var item = parentObject[key];\r\n                var itemType = typeof item;\r\n                if (key === \"__circularReferenceId\" && itemType === 'number') {\r\n                    circularRefs[item] = parentObject;\r\n                    delete parentObject[key];\r\n                }\r\n                else if (itemType === \"object\" && item) {\r\n                    if (item.__proxyFunctionId) {\r\n                        parentObject[key] = function () {\r\n                            return that.invokeRemoteMethod(\"proxy\" + item.__proxyFunctionId, \"__proxyFunctions\", Array.prototype.slice.call(arguments, 0), {}, { includeUnderscoreProperties: true });\r\n                        };\r\n                    }\r\n                    else if (item.__proxyDate) {\r\n                        parentObject[key] = new Date(item.__proxyDate);\r\n                    }\r\n                    else if (item.__circularReference) {\r\n                        parentObject[key] = circularRefs[item.__circularReference];\r\n                    }\r\n                    else {\r\n                        _this._customDeserializeObject(item, circularRefs);\r\n                    }\r\n                }\r\n            };\r\n            if (obj instanceof Array) {\r\n                for (var i = 0, l = obj.length; i < l; i++) {\r\n                    deserializeMember(obj, i);\r\n                }\r\n            }\r\n            else if (typeof obj === \"object\") {\r\n                for (var key in obj) {\r\n                    deserializeMember(obj, key);\r\n                }\r\n            }\r\n            return obj;\r\n        };\r\n        return XDMChannel;\r\n    }());\r\n    exports.XDMChannel = XDMChannel;\r\n    /**\r\n    * Registry of XDM channels kept per target frame/window\r\n    */\r\n    var XDMChannelManager = /** @class */ (function () {\r\n        function XDMChannelManager() {\r\n            var _this = this;\r\n            this._channels = [];\r\n            this._handleMessageReceived = function (event) {\r\n                // get channel and dispatch to it\r\n                var rpcMessage;\r\n                if (typeof event.data === \"string\") {\r\n                    try {\r\n                        rpcMessage = JSON.parse(event.data);\r\n                    }\r\n                    catch (error) {\r\n                        // The message is not a valid JSON string. Not one of our events.\r\n                    }\r\n                }\r\n                if (rpcMessage) {\r\n                    var handled = false;\r\n                    var channelOwner = void 0;\r\n                    for (var _i = 0, _a = _this._channels; _i < _a.length; _i++) {\r\n                        var channel = _a[_i];\r\n                        if (channel.owns(event.source, event.origin, rpcMessage)) {\r\n                            // keep a reference to the channel owner found. \r\n                            channelOwner = channel;\r\n                            handled = channel.onMessage(rpcMessage) || handled;\r\n                        }\r\n                    }\r\n                    if (channelOwner && !handled) {\r\n                        if (window.console) {\r\n                            console.error(\"No handler found on any channel for message: \" + JSON.stringify(rpcMessage));\r\n                        }\r\n                        // for instance based proxies, send an error on the channel owning the message to resolve any control creation promises\r\n                        // on the host frame. \r\n                        if (rpcMessage.instanceId) {\r\n                            channelOwner.error(rpcMessage, new Error(\"The registered object \" + rpcMessage.instanceId + \" could not be found.\"));\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            window.addEventListener(\"message\", this._handleMessageReceived);\r\n        }\r\n        /**\r\n        * Add an XDM channel for the given target window/iframe\r\n        *\r\n        * @param window - Target iframe window to communicate with\r\n        * @param targetOrigin - Url of the target iframe (if known)\r\n        */\r\n        XDMChannelManager.prototype.addChannel = function (window, targetOrigin) {\r\n            var channel = new XDMChannel(window, targetOrigin);\r\n            this._channels.push(channel);\r\n            return channel;\r\n        };\r\n        XDMChannelManager.prototype.removeChannel = function (channel) {\r\n            this._channels = this._channels.filter(function (c) { return c !== channel; });\r\n        };\r\n        return XDMChannelManager;\r\n    }());\r\n    /**\r\n    * The registry of global XDM handlers\r\n    */\r\n    exports.globalObjectRegistry = new XDMObjectRegistry();\r\n    /**\r\n    * Manages XDM channels per target window/frame\r\n    */\r\n    exports.channelManager = new XDMChannelManager();\r\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/azure-devops-extension-sdk/XDM.js?");

/***/ }),

/***/ "./node_modules/es6-object-assign/auto.js":
/*!************************************************!*\
  !*** ./node_modules/es6-object-assign/auto.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n(__webpack_require__(/*! ./index */ \"./node_modules/es6-object-assign/index.js\").polyfill)();\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/es6-object-assign/auto.js?");

/***/ }),

/***/ "./node_modules/es6-object-assign/index.js":
/*!*************************************************!*\
  !*** ./node_modules/es6-object-assign/index.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Code refactored from Mozilla Developer Network:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n */\n\n\n\nfunction assign(target, firstSource) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert first argument to object');\n  }\n\n  var to = Object(target);\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n    if (nextSource === undefined || nextSource === null) {\n      continue;\n    }\n\n    var keysArray = Object.keys(Object(nextSource));\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n      if (desc !== undefined && desc.enumerable) {\n        to[nextKey] = nextSource[nextKey];\n      }\n    }\n  }\n  return to;\n}\n\nfunction polyfill() {\n  if (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign\n    });\n  }\n}\n\nmodule.exports = {\n  assign: assign,\n  polyfill: polyfill\n};\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/es6-object-assign/index.js?");

/***/ }),

/***/ "./node_modules/es6-promise/auto.js":
/*!******************************************!*\
  !*** ./node_modules/es6-promise/auto.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// This file can be required in Browserify and Node.js for automatic polyfill\n// To use it:  require('es6-promise/auto');\n\nmodule.exports = (__webpack_require__(/*! ./ */ \"./node_modules/es6-promise/dist/es6-promise.js\").polyfill)();\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/es6-promise/auto.js?");

/***/ }),

/***/ "./node_modules/es6-promise/dist/es6-promise.js":
/*!******************************************************!*\
  !*** ./node_modules/es6-promise/dist/es6-promise.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.8+1e68dce6\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\t0;\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && \"function\" === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    var then$$1 = void 0;\n    try {\n      then$$1 = value.then;\n    } catch (error) {\n      reject(promise, error);\n      return;\n    }\n    handleMaybeThenable(promise, value, then$$1);\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = true;\n\n  if (hasCallback) {\n    try {\n      value = callback(detail);\n    } catch (e) {\n      succeeded = false;\n      error = e;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (succeeded === false) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = void 0;\n      var error = void 0;\n      var didError = false;\n      try {\n        _then = entry.then;\n      } catch (e) {\n        didError = true;\n        error = e;\n      }\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        if (didError) {\n          reject(promise, error);\n        } else {\n          handleMaybeThenable(promise, entry, _then);\n        }\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof __webpack_require__.g !== 'undefined') {\n    local = __webpack_require__.g;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n//# sourceMappingURL=es6-promise.map\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/es6-promise/dist/es6-promise.js?");

/***/ }),

/***/ "./node_modules/querystringify/index.js":
/*!**********************************************!*\
  !*** ./node_modules/querystringify/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nvar has = Object.prototype.hasOwnProperty\n  , undef;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String|Null} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  try {\n    return decodeURIComponent(input.replace(/\\+/g, ' '));\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */\nfunction encode(input) {\n  try {\n    return encodeURIComponent(input);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?#&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    // In the case if failed decoding, we want to omit the key/value pairs\n    // from the result.\n    //\n    if (key === null || value === null || key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = []\n    , value\n    , key;\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key];\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      key = encode(key);\n      value = encode(value);\n\n      //\n      // If we failed to encode the strings, we should bail out as we don't\n      // want to add invalid strings to the query.\n      //\n      if (key === null || value === null) continue;\n      pairs.push(key +'='+ value);\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/querystringify/index.js?");

/***/ }),

/***/ "./node_modules/requires-port/index.js":
/*!*********************************************!*\
  !*** ./node_modules/requires-port/index.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/requires-port/index.js?");

/***/ }),

/***/ "./MobbAutofixer/0.1.0/dist/azdo-attachment-service.ts":
/*!*************************************************************!*\
  !*** ./MobbAutofixer/0.1.0/dist/azdo-attachment-service.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AzdoAttachmentService)\n/* harmony export */ });\n/* harmony import */ var azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! azure-devops-extension-sdk */ \"./node_modules/azure-devops-extension-sdk/SDK.js\");\n/* harmony import */ var azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var azure_devops_extension_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! azure-devops-extension-api */ \"./node_modules/azure-devops-extension-api/index.js\");\n/* harmony import */ var azure_devops_extension_api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(azure_devops_extension_api__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var azure_devops_extension_api_Build__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! azure-devops-extension-api/Build */ \"./node_modules/azure-devops-extension-api/Build/index.js\");\n/* harmony import */ var azure_devops_extension_api_Build__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(azure_devops_extension_api_Build__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var url_parse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! url-parse */ \"./node_modules/url-parse/index.js\");\n/* harmony import */ var url_parse__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(url_parse__WEBPACK_IMPORTED_MODULE_3__);\n\n//import { Attachment, IAttachmentService } from \"./index\";\n\n\n\nclass AzdoAttachmentService {\n    constructor(taskId) {\n        this.taskId = taskId;\n        this.buildClient = (0,azure_devops_extension_api__WEBPACK_IMPORTED_MODULE_1__.getClient)(azure_devops_extension_api_Build__WEBPACK_IMPORTED_MODULE_2__.BuildRestClient);\n    }\n    async getAttachments(type) {\n        const attachments = [];\n        const build = await this.getThisBuild();\n        const azdoAttachments = await this.getPlanAttachmentNames(build.project.id, build.buildId, type);\n        //todo: refactor this to utilize promise.all\n        for (const a of azdoAttachments) {\n            const content = await this.getAttachmentContent(a);\n            attachments.push({\n                name: a.name,\n                type: a.type,\n                content\n            });\n        }\n        return attachments;\n    }\n    async getThisBuild() {\n        const projectService = await azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_0__.getService(\"ms.vss-tfs-web.tfs-page-data-service\" /* CommonServiceIds.ProjectPageService */);\n        const buildService = await azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_0__.getService(azure_devops_extension_api_Build__WEBPACK_IMPORTED_MODULE_2__.BuildServiceIds.BuildPageDataService);\n        const projectFromContext = await projectService.getProject();\n        const buildFromContext = await buildService.getBuildPageData(); //requires await to work eventhough does not return Promise\n        if (!projectFromContext || !buildFromContext) {\n            throw new Error('Not running in AzureDevops context.');\n        }\n        else {\n            console.log(`Running for project ${projectFromContext.id} and build ${buildFromContext.build?.id.toString()}`);\n        }\n        if (!buildFromContext.build?.id) {\n            console.log(\"Cannot get build id.\");\n            throw new Error('Cannot get build from page data');\n        }\n        const buildId = buildFromContext.build.id;\n        const build = await this.buildClient.getBuild(projectFromContext.name, buildId);\n        const timeline = await this.buildClient.getBuildTimeline(projectFromContext.name, buildId);\n        return {\n            project: projectFromContext,\n            buildId: buildId,\n            build: build,\n            timeline: timeline\n        };\n    }\n    async getPlanAttachmentNames(project, buildId, attachmentType) {\n        const attachments = await this.buildClient.getAttachments(project, buildId, attachmentType);\n        return attachments.map(a => {\n            const attachmentUrl = url_parse__WEBPACK_IMPORTED_MODULE_3___default()(a._links.self.href);\n            const isVSTSUrl = attachmentUrl.hostname.includes('visualstudio.com');\n            const segments = attachmentUrl.pathname.split('/');\n            if (isVSTSUrl) {\n                return {\n                    projectId: segments[1],\n                    buildId: Number.parseInt(segments[5]),\n                    timelineId: segments[6],\n                    recordId: segments[7],\n                    name: a.name,\n                    type: attachmentType,\n                    href: a._links.self.href\n                };\n            }\n            return {\n                projectId: segments[2],\n                buildId: Number.parseInt(segments[6]),\n                timelineId: segments[7],\n                recordId: segments[8],\n                name: a.name,\n                type: attachmentType,\n                href: a._links.self.href\n            };\n        });\n    }\n    async getAttachmentContent(attachment) {\n        let content;\n        try {\n            content = await this.getAttachment(attachment);\n        }\n        catch (e) {\n            throw new Error(`Failed to download plain plan: ${e}`);\n        }\n        return content;\n    }\n    async getAttachment(attachment) {\n        const content = await this.buildClient.getAttachment(attachment.projectId, attachment.buildId, attachment.timelineId, attachment.recordId, attachment.type, attachment.name);\n        const td = new TextDecoder();\n        return td.decode(content);\n    }\n}\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./MobbAutofixer/0.1.0/dist/azdo-attachment-service.ts?");

/***/ }),

/***/ "./MobbAutofixer/0.1.0/dist/loadmobblink.ts":
/*!**************************************************!*\
  !*** ./MobbAutofixer/0.1.0/dist/loadmobblink.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! azure-devops-extension-sdk */ \"./node_modules/azure-devops-extension-sdk/SDK.js\");\n/* harmony import */ var azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _azdo_attachment_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./azdo-attachment-service */ \"./MobbAutofixer/0.1.0/dist/azdo-attachment-service.ts\");\n\n\nclass LoadMobblink {\n    constructor(taskId) {\n        this.attachmentService = new _azdo_attachment_service__WEBPACK_IMPORTED_MODULE_1__[\"default\"](taskId);\n    }\n    async initialize() {\n        try {\n            // Initialize the SDK\n            await azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_0__.init();\n            console.log(\"SDK initialized\");\n            // Wait for the SDK to be ready\n            await azure_devops_extension_sdk__WEBPACK_IMPORTED_MODULE_0__.ready();\n            console.log(\"SDK is ready\");\n            // Extract attachments of type 'mobbLinkReport'\n            const attachments = await this.attachmentService.getAttachments('mobbLinkReport');\n            this.displayAttachments(attachments);\n        }\n        catch (error) {\n            console.error(\"Failed to initialize or load attachments:\", error);\n        }\n    }\n    displayAttachments(attachments) {\n        const mobbLinkReport = attachments.find(attachment => attachment.name === 'mobbLinkReport.txt');\n        const mobbButton = document.getElementById('mobbButton');\n        const loadingMessage = document.getElementById('loadingMessage');\n        if (mobbLinkReport && mobbButton && loadingMessage) {\n            console.log(\"Attachment retrieved:\", mobbLinkReport);\n            console.log(`Attachment: ${mobbLinkReport.name}`);\n            console.log(`Content: ${mobbLinkReport.content}`);\n            const cleanURL = this.cleanUrl(mobbLinkReport.content);\n            console.log('Clean URL: ' + cleanURL);\n            // Set the button href\n            mobbButton.href = cleanURL;\n            // Hide the loading message and show the button\n            loadingMessage.style.display = 'none';\n            mobbButton.style.display = 'flex'; // Show the button\n        }\n        else {\n            console.log(\"mobbLinkReport.txt not found.\");\n        }\n    }\n    cleanUrl(url) {\n        // Regular expression to match ANSI escape codes\n        const ansiRegex = /\\x1B\\[([0-9;]*[m])/g;\n        // Remove any ANSI escape codes from the URL\n        const cleanedUrl = url.replace(ansiRegex, '');\n        return cleanedUrl;\n    }\n}\n// Instantiate and run the LoadMobblink class\nconst taskId = \"d49b6d4a-9db5-465d-9770-e62b734e4a45\"; // Replace with the actual task ID\nconst loadMobblink = new LoadMobblink(taskId);\n// Start the process of initializing the SDK and extracting the attachments\nloadMobblink.initialize();\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./MobbAutofixer/0.1.0/dist/loadmobblink.ts?");

/***/ }),

/***/ "./node_modules/url-parse/index.js":
/*!*****************************************!*\
  !*** ./node_modules/url-parse/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar required = __webpack_require__(/*! requires-port */ \"./node_modules/requires-port/index.js\")\n  , qs = __webpack_require__(/*! querystringify */ \"./node_modules/querystringify/index.js\")\n  , controlOrWhitespace = /^[\\x00-\\x20\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+/\n  , CRHTLF = /[\\n\\r\\t]/g\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//\n  , port = /:\\d+$/\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\\\/]+)?([\\S\\s]*)/i\n  , windowsDriveLetter = /^[a-zA-Z]:/;\n\n/**\n * Remove control characters and whitespace from the beginning of a string.\n *\n * @param {Object|String} str String to trim.\n * @returns {String} A new string representing `str` stripped of control\n *     characters and whitespace from its beginning.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(controlOrWhitespace, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address, url) {     // Sanitize what is left of the address\n    return isSpecial(url.protocol) ? address.replace(/\\\\/g, '/') : address;\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d*)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof __webpack_require__.g !== 'undefined') globalVar = __webpack_require__.g;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * Check whether a protocol scheme is special.\n *\n * @param {String} The protocol scheme of the URL\n * @return {Boolean} `true` if the protocol scheme is special, else `false`\n * @private\n */\nfunction isSpecial(scheme) {\n  return (\n    scheme === 'file:' ||\n    scheme === 'ftp:' ||\n    scheme === 'http:' ||\n    scheme === 'https:' ||\n    scheme === 'ws:' ||\n    scheme === 'wss:'\n  );\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @param {Object} location\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address, location) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n  location = location || {};\n\n  var match = protocolre.exec(address);\n  var protocol = match[1] ? match[1].toLowerCase() : '';\n  var forwardSlashes = !!match[2];\n  var otherSlashes = !!match[3];\n  var slashesCount = 0;\n  var rest;\n\n  if (forwardSlashes) {\n    if (otherSlashes) {\n      rest = match[2] + match[3] + match[4];\n      slashesCount = match[2].length + match[3].length;\n    } else {\n      rest = match[2] + match[4];\n      slashesCount = match[2].length;\n    }\n  } else {\n    if (otherSlashes) {\n      rest = match[3] + match[4];\n      slashesCount = match[3].length;\n    } else {\n      rest = match[4]\n    }\n  }\n\n  if (protocol === 'file:') {\n    if (slashesCount >= 2) {\n      rest = rest.slice(2);\n    }\n  } else if (isSpecial(protocol)) {\n    rest = match[4];\n  } else if (protocol) {\n    if (forwardSlashes) {\n      rest = rest.slice(2);\n    }\n  } else if (slashesCount >= 2 && isSpecial(location.protocol)) {\n    rest = match[4];\n  }\n\n  return {\n    protocol: protocol,\n    slashes: forwardSlashes || isSpecial(protocol),\n    slashesCount: slashesCount,\n    rest: rest\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '', location);\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (\n    extracted.protocol === 'file:' && (\n      extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) ||\n    (!extracted.slashes &&\n      (extracted.protocol ||\n        extracted.slashesCount < 2 ||\n        !isSpecial(url.protocol)))\n  ) {\n    instructions[3] = [/(.*)/, 'pathname'];\n  }\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address, url);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      index = parse === '@'\n        ? address.lastIndexOf(parse)\n        : address.indexOf(parse);\n\n      if (~index) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n  if (url.pathname.charAt(0) !== '/' && isSpecial(url.protocol)) {\n    url.pathname = '/' + url.pathname;\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n\n  if (url.auth) {\n    index = url.auth.indexOf(':');\n\n    if (~index) {\n      url.username = url.auth.slice(0, index);\n      url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n      url.password = url.auth.slice(index + 1);\n      url.password = encodeURIComponent(decodeURIComponent(url.password))\n    } else {\n      url.username = encodeURIComponent(decodeURIComponent(url.auth));\n    }\n\n    url.auth = url.password ? url.username +':'+ url.password : url.username;\n  }\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (port.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    case 'username':\n    case 'password':\n      url[part] = encodeURIComponent(value);\n      break;\n\n    case 'auth':\n      var index = value.indexOf(':');\n\n      if (~index) {\n        url.username = value.slice(0, index);\n        url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n        url.password = value.slice(index + 1);\n        url.password = encodeURIComponent(decodeURIComponent(url.password));\n      } else {\n        url.username = encodeURIComponent(decodeURIComponent(value));\n      }\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.auth = url.password ? url.username +':'+ url.password : url.username;\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , host = url.host\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result =\n    protocol +\n    ((url.protocol && url.slashes) || isSpecial(url.protocol) ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  } else if (url.password) {\n    result += ':'+ url.password;\n    result += '@';\n  } else if (\n    url.protocol !== 'file:' &&\n    isSpecial(url.protocol) &&\n    !host &&\n    url.pathname !== '/'\n  ) {\n    //\n    // Add back the empty userinfo, otherwise the original invalid URL\n    // might be transformed into a valid one with `url.pathname` as host.\n    //\n    result += '@';\n  }\n\n  //\n  // Trailing colon is removed from `url.host` when it is parsed. If it still\n  // ends with a colon, then add back the trailing colon that was removed. This\n  // prevents an invalid URL from being transformed into a valid one.\n  //\n  if (host[host.length - 1] === ':' || (port.test(url.hostname) && !url.port)) {\n    host += ':';\n  }\n\n  result += host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/url-parse/index.js?");

/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DOMException: () => (/* binding */ DOMException),\n/* harmony export */   Headers: () => (/* binding */ Headers),\n/* harmony export */   Request: () => (/* binding */ Request),\n/* harmony export */   Response: () => (/* binding */ Response),\n/* harmony export */   fetch: () => (/* binding */ fetch)\n/* harmony export */ });\nvar support = {\n  searchParams: 'URLSearchParams' in self,\n  iterable: 'Symbol' in self && 'iterator' in Symbol,\n  blob:\n    'FileReader' in self &&\n    'Blob' in self &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in self,\n  arrayBuffer: 'ArrayBuffer' in self\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n    throw new TypeError('Invalid character in header field name')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    this.bodyUsed = this.bodyUsed\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n    var parts = line.split(':')\n    var key = parts.shift().trim()\n    if (key) {\n      var value = parts.join(':').trim()\n      headers.append(key, value)\n    }\n  })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = 'statusText' in options ? options.statusText : ''\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = self.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      setTimeout(function() {\n        resolve(new Response(body, options))\n      }, 0)\n    }\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException('Aborted', 'AbortError'))\n      }, 0)\n    }\n\n    function fixUrl(url) {\n      try {\n        return url === '' && self.location.href ? self.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr) {\n      if (support.blob) {\n        xhr.responseType = 'blob'\n      } else if (\n        support.arrayBuffer &&\n        request.headers.get('Content-Type') &&\n        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1\n      ) {\n        xhr.responseType = 'arraybuffer'\n      }\n    }\n\n    request.headers.forEach(function(value, name) {\n      xhr.setRequestHeader(name, value)\n    })\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!self.fetch) {\n  self.fetch = fetch\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n}\n\n\n//# sourceURL=webpack://Mobb-Autofixer/./node_modules/whatwg-fetch/fetch.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./MobbAutofixer/0.1.0/dist/loadmobblink.ts");
/******/ 	
/******/ })()
;